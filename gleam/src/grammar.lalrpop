// vi: ft=rust

use std::str::FromStr;

use crate::ast::{
    UntypedExpr, Expr, Arg, UntypedModule, Module, UntypedStatement, Statement, Type, Pattern,
    BinOp, Clause, UntypedClause, EnumConstructor
};
use crate::parser::*;

grammar;

pub Module: UntypedModule = {
    Statement* => Module {
        typ: (),
        name: "".to_string(),
        statements: <>,
    }
}

Statement: UntypedStatement = {
    StatementFn => <>,
    StatementTest => <>,
    StatementEnum => <>,
    StatementExternalFn => <>,
    StatementExternalType => <>,
    StatementImport => <>,
}

StatementEnum: UntypedStatement = {
    <s:@L> <p:"pub"?> "enum" <t:TypeName> "=" <cs:EnumConstructor+> <e:@L> => Statement::Enum {
        meta: meta(s, e),
        public: p.is_some(),
        name: t.0,
        args: t.1,
        constructors: cs,
    }
}

EnumConstructor: EnumConstructor = {
    "|" <s:@L> <t:UpName> <args:EnumConstructorArgs?> <e:@L> => EnumConstructor {
        meta: meta(s, e),
        name: t,
        args: args.unwrap_or_else(|| vec![]),
    },
}

EnumConstructorArgs: Vec<Type> = {
    "(" <ts:Comma<Type>> ")" => ts
}

StatementExternalFn: UntypedStatement = {
    <s:@L> <p:"pub"?> "external" "fn" <n:VarName> "(" <a:Comma<Type>> ")" "->" <r:Type> "=" <m:RawString> <f:RawString> <e:@L> => Statement::ExternalFn {
        meta: meta(s, e),
        public: p.is_some(),
        name: n,
        args: a,
        module: m,
        fun: f,
        retrn: r,
    }
}

StatementFn: UntypedStatement = {
    <s:@L> <p:"pub"?> "fn" <n:VarName> "(" <a:Comma<FnArg>> ")" "{" <b:Expr> "}" <e:@L> => Statement::Fn {
        meta: meta(s, e),
        public: p.is_some(),
        name: n,
        args: a,
        body: b,
    }
}

StatementTest: UntypedStatement = {
    <s:@L> "test" <n:VarName> "{" <b:Expr> "}" <e:@L> => Statement::Test {
        meta: meta(s, e),
        name: n,
        body: b,
    }
}

StatementImport: UntypedStatement = {
    <s:@L> "import" <n:VarName> <e:@L> => Statement::Import {
        meta: meta(s, e),
        module: n,
    }
}

StatementExternalType: UntypedStatement = {
    <s:@L> <p:"pub"?> "external" "type" <n:TypeName> <e:@L> => Statement::ExternalType {
        meta: meta(s, e),
        public: p.is_some(),
        name: n.0,
        args: n.1,
    }
}

pub Expr: UntypedExpr = {
    Let => <>,
    Seq => <>,
    OpOrSimpleExpr => <>,
}

OpOrSimpleExpr: UntypedExpr = {
    <o:Op<OrOp, OpOrSimpleExpr, Op2>> => <>,
    Op2 => <>,
}

OrOp: BinOp = {
    "||" => BinOp::Or,
}

Op2: UntypedExpr = {
    <o:Op<AndOp, Op2, Op3>> => <>,
    Op3 => <>,
}

AndOp: BinOp = {
    "&&" => BinOp::And,
}

Op3: UntypedExpr = {
    <o:Op<EqOp, Op3, Op4>> => <>,
    Op4 => <>,
}

EqOp: BinOp = {
    "==" => BinOp::Eq,
    "!=" => BinOp::NotEq,
}

Op4: UntypedExpr = {
    <o:Op<CompareOp, Op4, Op5>> => <>,
    Op5 => <>,
}

CompareOp: BinOp = {
    "<" => BinOp::Lt,
    "<=" => BinOp::LtEq,
    ">" => BinOp::Gt,
    ">=" => BinOp::GtEq,
}

Op5: UntypedExpr = {
    <o:Op<PipeOp, Op5, Op6>> => <>,
    Op6 => <>,
}

PipeOp: BinOp = {
    "|>" => BinOp::Pipe,
}

Op6: UntypedExpr = {
    <o:Op<AddOp, Op6, Op7>> => <>,
    Op7 => <>,
}

AddOp: BinOp = {
    "+" => BinOp::AddInt,
    "+." => BinOp::AddFloat,
    "-" => BinOp::SubInt,
    "-." => BinOp::SubFloat,
}

Op7: UntypedExpr = {
    <o:Op<MultOp, Op7, SimpleExpr>> => <>,
    SimpleExpr => <>,
}

MultOp: BinOp = {
    "%" => BinOp::ModuloInt,
    "%." => BinOp::ModuloFloat,
    "*" => BinOp::MultInt,
    "*." => BinOp::MultFloat,
    "/" => BinOp::DivInt,
    "/." => BinOp::DivFloat,
}

SimpleExpr: UntypedExpr = {
    Fn => <>,
    Nil => <>,
    Int => <>,
    Var => <>,
    Case => <>,
    Cons => <>,
    List => <>,
    Call => <>,
    Float => <>,
    Tuple => <>,
    String => <>,
    Record => <>,
    RecordNil => <>,
    RecordCons => <>,
    Constructor => <>,
    RecordSelect => <>,
    ModuleSelect => <>,
    "begin" <e:Expr> "end" => e,
}

Case: UntypedExpr = {
    <s:@L> "case" <subject:OpOrSimpleExpr> "{" <clauses:Clause+> "}" <e:@L> => Expr::Case {
        meta: meta(s, e),
        typ: (),
        subject: Box::new(subject),
        clauses,
    }
}

Clause: UntypedClause = {
    <s:@L> "|" <pattern:Pattern> "->" <then:Expr> <e:@L> => Clause {
        meta: meta(s, e),
        pattern,
        then: Box::new(then),
    }
}

Let: UntypedExpr = {
    <s:@L> "let" <p:Pattern> "=" <v:OpOrSimpleExpr> <e:@L> <t:Expr> => Expr::Let {
        meta: meta(s, e),
        typ: (),
        value: Box::new(v),
        pattern: p,
        then: Box::new(t),
    }
}

RecordSelect: UntypedExpr = {
    <s:@L> <r:SimpleExpr> "." <l:VarName> <e:@L> => Expr::RecordSelect {
        meta: meta(s, e),
        typ: (),
        label: l,
        record: Box::new(r),
    },
}

RecordNil: UntypedExpr = {
    <s:@L> "{}" <e:@L> => Expr::RecordNil {
        meta: meta(s, e),
        typ: (),
    }
}

Record: UntypedExpr = {
    <s:@L> "{" <fields:RecordFields> "}" <e:@L> => {
        fields.into_iter().fold(
            Expr::RecordNil {
                meta: meta(e - 1, e),
                typ: (),
            },
            |a, e| Expr::RecordCons {
                meta: e.1.meta().clone(),
                typ: (),
                label: e.0,
                value: Box::new(e.1),
                tail: Box::new(a),
            }
        )
    }
}

RecordCons: UntypedExpr = {
    <s:@L> "{" <r:SimpleExpr> "|" <fields:RecordFields> "}" <e:@L> => {
        fields.into_iter().fold(r, |a, f| Expr::RecordCons {
            meta: meta(s, e),
            typ: (),
            label: f.0,
            value: Box::new(f.1),
            tail: Box::new(a),
        })
    }
}

ModuleSelect: UntypedExpr = {
    <s:@L> <m:SimpleExpr> ":" <l:VarName> <e:@L> => Expr::ModuleSelect {
        meta: meta(s, e),
        typ: (),
        label: l,
        module: Box::new(m),
    },
}

Seq: UntypedExpr = {
    <s:@L> <a:SimpleExpr> <b:Expr> <e:@L> => Expr::Seq {
        meta: meta(s, e),
        typ: (),
        first: Box::new(a),
        then: Box::new(b),
    }
}

Fn: UntypedExpr = {
    <s:@L> "fn(" <a:Comma<FnArg>> ")" "{" <b:Expr> "}" <e:@L> => Expr::Fn {
        meta: meta(s, e),
        is_capture: false,
        typ: (),
        args: a,
        body: Box::new(b),
    }
}

FnArg: Arg = {
    VarName => Arg {
        name: Some(<>),
    },

    DiscardName => Arg {
        name: None,
    },
}

Constructor: UntypedExpr = {
    <s:@L> <n:ConstructorName> <e:@L> => Expr::Constructor {
        meta: meta(s, e),
        typ: (),
        name: n,
    },
}

Call: UntypedExpr = {
    <s:@L> <fun:SimpleExpr> "(" <args:Comma<OpOrSimpleExpr>> ")" <e:@L> => Expr::Call {
        meta: meta(s, e),
        typ: (),
        fun: Box::new(fun),
        args: args,
    }
}

Tuple: UntypedExpr = {
    <s:@L> "{" <elems:Comma<OpOrSimpleExpr>> "}" <e:@L> => Expr::Tuple {
        meta: meta(s, e),
        typ: (),
        elems: elems,
    }
}

Cons: UntypedExpr = {
    <s:@L> "[" <head:OpOrSimpleExpr> "|" <tail:OpOrSimpleExpr> "]" <e:@L> => Expr::Cons {
        meta: meta(s, e),
        typ: (),
        head: Box::new(head),
        tail: Box::new(tail),
    }
}

List: UntypedExpr = {
    <s:@L> "[" <elems:Comma<OpOrSimpleExpr>> "]" <e:@L> => {
        elems.into_iter().rev().fold(
            Expr::Nil {
                meta: meta(e - 1, e),
                typ: (),
            },
            |a, e| Expr::Cons {
                meta: e.meta().clone(),
                typ: (),
                head: Box::new(e),
                tail: Box::new(a),
            }
        )
    }
}

Var: UntypedExpr = {
    <s:@L> <v:VarName> <e:@L> => Expr::Var {
        meta: meta(s, e),
        typ: (),
        scope: (),
        name: v,
    }
}

Nil: UntypedExpr = {
    <s:@L> "[]" <e:@L> => Expr::Nil {
        meta: meta(s, e),
        typ: (),
    }
}

// TODO: Unescape?
String: UntypedExpr = {
    <s:@L> <x:RawString> <e:@L> => Expr::String {
        meta: meta(s, e),
        typ: (),
        value: x,
    }
}

Int: UntypedExpr = {
    <s:@L> <i:r"-?[0-9]+"> <e:@L> => Expr::Int {
        meta: meta(s, e),
        typ: (),
        value: i64::from_str(i).unwrap(),
    }
}

Float: UntypedExpr = {
    <s:@L> <f:r"-?[0-9]+\.+[0-9]*"> <e:@L> => Expr::Float {
        meta: meta(s, e),
        typ: (),
        value: f64::from_str(f).unwrap(),
    }
}

RecordField: (String, UntypedExpr) = {
    <l:VarName> "=" <v:OpOrSimpleExpr> => {
        (l, v)
    }
}

RecordFields: Vec<(String, UntypedExpr)> = {
    RecordField => vec![<>],

    <x:RecordField> "," => vec![x],

    <x:RecordField> "," <xs:RecordFields> => {
        let mut xs = xs;
        xs.push(x);
        xs
    }
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Op<Operator, Current, Next>: UntypedExpr = {
    <s:@L> <l:(<Current>)> <o:(<Operator>)> <r:Next> <e:@L> => Expr::BinOp {
        meta: meta(s, e),
        typ: (),
        name: o,
        left: Box::new(l),
        right: Box::new(r),
    },
}

Pattern: Pattern = {
    PatternVar => <>,
    PatternInt => <>,
    PatternNil => <>,
    PatternCons => <>,
    PatternList => <>,
    PatternFloat => <>,
    PatternTuple => <>,
    PatternString => <>,
    PatternDiscard => <>,
    // PatternRecord => <>,
    PatternConstructor => <>,
}

PatternConstructor: Pattern = {
    <s:@L> <name:UpName> <args:PatternConstructorArgs?> <e:@L> => Pattern::Constructor {
        meta: meta(s, e),
        module: None,
        args: args.unwrap_or_else(|| vec![]),
        name,
    },

    <s:@L> <module:VarName> ":" <name:UpName> <args:PatternConstructorArgs?> <e:@L> => Pattern::Constructor {
        meta: meta(s, e),
        module: Some(module),
        args: args.unwrap_or_else(|| vec![]),
        name,
    },
}

PatternConstructorArgs: Vec<Pattern> = {
    "(" <ts:Comma<Pattern>> ")" => ts
}

PatternTuple: Pattern = {
    <s:@L> "{" <elems:Comma<Pattern>> "}" <e:@L> => Pattern::Tuple {
        meta: meta(s, e),
        elems,
    }
}

PatternFloat: Pattern = {
    <s:@L> <f:r"-?[0-9]+\.+[0-9]*"> <e:@L> => Pattern::Float {
        meta: meta(s, e),
        value: f64::from_str(f).unwrap(),
    }
}

PatternString: Pattern = {
    <s:@L> <a:RawString> <e:@L> => Pattern::String {
        meta: meta(s, e),
        value: a,
    }
}

PatternInt: Pattern = {
    <s:@L> <i:r"-?[0-9]+"> <e:@L> => Pattern::Int {
        meta: meta(s, e),
        value: i64::from_str(i).unwrap(),
    }
}

PatternVar: Pattern = {
    <s:@L> <v:VarName> <e:@L> => Pattern::Var {
        meta: meta(s, e),
        name: v,
    }
}

PatternDiscard: Pattern = {
    <s:@L> <_d:DiscardName> <e:@L> => Pattern::Discard {
        meta: meta(s, e),
    }
}

PatternNil: Pattern = {
    <s:@L> "[]" <e:@L> => Pattern::Nil {
        meta: meta(s, e),
    }
}

PatternList: Pattern = {
    <s:@L> "[" <elems:Comma<Pattern>> "]" <e:@L> => {
        elems.into_iter().rev().fold(
            Pattern::Nil {
                meta: meta(e - 1, e),
            },
            |a, e| Pattern::Cons {
                meta: e.meta().clone(),
                head: Box::new(e),
                tail: Box::new(a),
            }
        )
    }
}

PatternCons: Pattern = {
    <s:@L> "[" <head:Pattern> "|" <tail:Pattern> "]" <e:@L> => Pattern::Cons {
        meta: meta(s, e),
        head: Box::new(head),
        tail: Box::new(tail),
    }
}

Type: Type = {
    TypeConstructor => <>,
    TypeTuple => <>,
    TypeVar => <>,
    TypeFn => <>,
}

TypeConstructor: Type = {
    <s:@L> <n:r"[A-Z][A-Za-z]*"> <e:@L> => Type::Constructor {
        meta: meta(s, e),
        args: vec![],
        name: n.to_string(),
    },
    <s:@L> <n:r"[A-Z][A-Za-z]*"> "(" <a:Comma<Type>> ")" <e:@L> => Type::Constructor {
        meta: meta(s, e),
        args: a,
        name: n.to_string(),
    },
}

TypeTuple: Type = {
    <s:@L> "{" <elems:Comma<Type>> "}" <e:@L> => Type::Tuple {
        meta: meta(s, e),
        elems: elems,
    }
}


TypeVar: Type = {
    <s:@L> <n:VarName> <e:@L> => Type::Var {
        meta: meta(s, e),
        name: n,
    }
}

TypeFn: Type = {
    <s:@L> "fn(" <args:Comma<Type>> ")" "->" <retrn:Type> <e:@L> => Type::Fn {
        meta: meta(s, e),
        retrn: Box::new(retrn),
        args,
    }
}

TypeName: (String, Vec<String>) = {
    <v:UpName> => (v, vec![]),
    <v:UpName> "(" <a:Comma<VarName>> ")" => (v, a),
}

UpName: String = {
    <v:r"[A-Z][A-Za-z]*"> => v.to_string()
}

DiscardName: () = {
    <v:r"_[A-Za-z_]*"> => ()
}

VarName: String = {
    <v:r"[a-z][A-Za-z_]*"> => v.to_string()
}

ConstructorName: String = {
    <v:r"[A-Z][A-Za-z]*"> => v.to_string()
}

RawString: String = {
    <x:r#""(([^\\"]|\\.)*)""#> => x[1..(x.len() - 1)].to_string(),
}
