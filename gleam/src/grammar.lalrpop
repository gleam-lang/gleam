// vi: ft=rust

use std::str::FromStr;

use crate::ast::{
    UntypedExpr, Expr, Arg, UntypedModule, Module, UntypedStatement, Statement, TypeAst, UntypedPattern,
    BinOp, Clause, UntypedClause, EnumConstructor, Pattern
};
use crate::parser::*;

grammar;

extern {
    type Error = crate::parser::Error;
}

pub Module: UntypedModule = {
    Statement* => Module {
        type_info: (),
        name: vec![],
        statements: <>,
    }
}

Statement: UntypedStatement = {
    StatementFn => <>,
    StatementEnum => <>,
    StatementStruct => <>,
    StatementExternalFn => <>,
    StatementExternalType => <>,
    StatementImport => <>,
}

StatementEnum: UntypedStatement = {
    <s:@L> <p:"pub"?> "enum" <t:TypeName> "=" <cs:EnumConstructor+> <e:@L> => Statement::Enum {
        meta: meta(s, e),
        public: p.is_some(),
        name: t.0,
        args: t.1,
        constructors: cs,
    }
}

StatementStruct: UntypedStatement = {
    <s:@L> <p:"pub"?> "struct" <t:TypeName> "{" <fields:StructFieldDefinition*> "}" <e:@L> => Statement::Struct {
        meta: meta(s, e),
        public: p.is_some(),
        name: t.0,
        type_args: t.1,
        fields,
    },

    <s:@L> <p:"pub"?> "struct" <t:TypeName> "{}" <e:@L> => Statement::Struct {
        meta: meta(s, e),
        public: p.is_some(),
        name: t.0,
        type_args: t.1,
        fields: vec![],
    },
}

StructFieldDefinition: (String, TypeAst) = {
    <name:VarName> ":" <typ:Type> => (name, typ)
}

EnumConstructor: EnumConstructor = {
    "|" <s:@L> <t:UpName> <args:EnumConstructorArgs?> <e:@L> => EnumConstructor {
        meta: meta(s, e),
        name: t,
        args: args.unwrap_or_else(|| vec![]),
    },
}

EnumConstructorArgs: Vec<TypeAst> = {
    "(" <ts:Comma<Type>> ")" => ts
}

StatementExternalFn: UntypedStatement = {
    <s:@L> <p:"pub"?> "external" "fn" <n:VarName> "(" <a:Comma<Type>> ")" "->" <r:Type> "=" <m:RawString> <f:RawString> <e:@L> => Statement::ExternalFn {
        meta: meta(s, e),
        public: p.is_some(),
        name: n,
        args: a,
        module: m,
        fun: f,
        retrn: r,
    }
}

StatementFn: UntypedStatement = {
    <s:@L> <p:"pub"?> "fn" <n:VarName> "(" <a:Comma<FnArg>> ")" <return_annotation:("->" <Type>)?> "{" <b:Expr+> "}" <e:@L> => Statement::Fn {
        meta: meta(s, e),
        public: p.is_some(),
        name: n,
        args: a,
        body: seq(b),
        return_annotation,
    }
}

StatementImport: UntypedStatement = {
    <s:@L> "import" <ns:(<VarName> "/")*> <n:VarName> <e:@L> <as_name:("as" <VarName>)?> => {
        let mut module = ns;
        module.push(n);
        Statement::Import {
            meta: meta(s, e),
            module,
            as_name,
        }
    }
}

StatementExternalType: UntypedStatement = {
    <s:@L> <p:"pub"?> "external" "type" <n:TypeName> <e:@L> => Statement::ExternalType {
        meta: meta(s, e),
        public: p.is_some(),
        name: n.0,
        args: n.1,
    }
}

pub Expr: UntypedExpr = {
    Let => <>,
    OpOrSimpleExpr => <>,
}

OpOrSimpleExpr: UntypedExpr = {
    <o:Op<OrOp, OpOrSimpleExpr, Op2>> => <>,
    Op2 => <>,
}

OrOp: BinOp = {
    "||" => BinOp::Or,
}

Op2: UntypedExpr = {
    <o:Op<AndOp, Op2, Op3>> => <>,
    Op3 => <>,
}

AndOp: BinOp = {
    "&&" => BinOp::And,
}

Op3: UntypedExpr = {
    <o:Op<EqOp, Op3, Op4>> => <>,
    Op4 => <>,
}

EqOp: BinOp = {
    "==" => BinOp::Eq,
    "!=" => BinOp::NotEq,
}

Op4: UntypedExpr = {
    <o:Op<CompareOp, Op4, Op5>> => <>,
    Op5 => <>,
}

CompareOp: BinOp = {
    "<" => BinOp::LtInt,
    "<=" => BinOp::LtEqInt,
    ">" => BinOp::GtInt,
    ">=" => BinOp::GtEqInt,
    "<." => BinOp::LtFloat,
    "<=." => BinOp::LtEqFloat,
    ">." => BinOp::GtFloat,
    ">=." => BinOp::GtEqFloat,
}

Op5: UntypedExpr = {
    <o:Op<PipeOp, Op5, Op6>> => <>,
    Op6 => <>,
}

PipeOp: BinOp = {
    "|>" => BinOp::Pipe,
}

Op6: UntypedExpr = {
    <o:Op<AddOp, Op6, Op7>> => <>,
    Op7 => <>,
}

AddOp: BinOp = {
    "+" => BinOp::AddInt,
    "+." => BinOp::AddFloat,
    "-" => BinOp::SubInt,
    "-." => BinOp::SubFloat,
}

Op7: UntypedExpr = {
    <o:Op<MultOp, Op7, SimpleExpr>> => <>,
    SimpleExpr => <>,
}

MultOp: BinOp = {
    "%" => BinOp::ModuloInt,
    "*" => BinOp::MultInt,
    "*." => BinOp::MultFloat,
    "/" => BinOp::DivInt,
    "/." => BinOp::DivFloat,
}

SimpleExpr: UntypedExpr = {
    Fn => <>,
    Nil => <>,
    Int => <>,
    Var => <>,
    Case => <>,
    List => <>,
    Call => <>,
    Float => <>,
    String => <>,
    Map => <>,
    MapNil => <>,
    MapCons => <>,
    AnonStruct => <>,
    FieldSelect => <>,
    "begin" <e:Expr> "end" => e,
}

Case: UntypedExpr = {
    <s:@L> "case" <subject:OpOrSimpleExpr> "{" <clauses:Clause+> "}" <e:@L> => Expr::Case {
        meta: meta(s, e),
        typ: (),
        subject: Box::new(subject),
        clauses,
    }
}

Clause: UntypedClause = {
    <s:@L> "|" <pattern:Pattern> "->" <then:Expr+> <e:@L> => Clause {
        meta: meta(s, e),
        pattern,
        then: seq(then),
    }
}

Let: UntypedExpr = {
    <s:@L> "let" <p:Pattern> "=" <v:OpOrSimpleExpr> <e:@L> <t:Expr> => Expr::Let {
        meta: meta(s, e),
        typ: (),
        value: Box::new(v),
        pattern: p,
        then: Box::new(t),
    }
}

FieldSelect: UntypedExpr = {
    <s:@L> <r:SimpleExpr> "." <l:AnyName> <e:@L> => Expr::FieldSelect {
        meta: meta(s, e),
        typ: (),
        label: l,
        map: Box::new(r),
    },
}

MapNil: UntypedExpr = {
    <s:@L> "{}" <e:@L> => Expr::MapNil {
        meta: meta(s, e),
        typ: (),
    }
}

Map: UntypedExpr = {
    <s:@L> "{" <fields:MapFields> "}" <e:@L> => {
        fields.into_iter().fold(
            Expr::MapNil {
                meta: meta(e - 1, e),
                typ: (),
            },
            |a, e| Expr::MapCons {
                meta: e.1.meta().clone(),
                typ: (),
                label: e.0,
                value: Box::new(e.1),
                tail: Box::new(a),
            }
        )
    }
}

MapCons: UntypedExpr = {
    <s:@L> "{" <r:SimpleExpr> "|" <fields:MapFields> "}" <e:@L> => {
        fields.into_iter().fold(r, |a, f| Expr::MapCons {
            meta: meta(s, e),
            typ: (),
            label: f.0,
            value: Box::new(f.1),
            tail: Box::new(a),
        })
    }
}

Fn: UntypedExpr = {
    <s:@L> "fn(" <a:Comma<FnArg>> ")" "{" <b:Expr+> "}" <e:@L> => Expr::Fn {
        meta: meta(s, e),
        is_capture: false,
        typ: (),
        args: a,
        body: Box::new(seq(b)),
    },
}

FnArg: Arg = {
    <s:@L> <n:VarName> <annotation:(":" <Type>)?> <e:@L> => Arg {
        meta: meta(s, e),
        name: Some(n),
        annotation,
    },

    <s:@L> DiscardName <e:@L> => Arg {
        meta: meta(s, e),
        name: None,
        annotation: None,
    },
}

Call: UntypedExpr = {
    <s:@L> <fun:SimpleExpr> "(" <args:Comma<CallArg>> ")" <e:@L> =>? {
        let hole_arg_name = "capture@1";
        let mut num_holes = 0;
        let args = args.into_iter().map(|a| match a {
            Ok(arg) => arg,
            Err(meta) => {
                num_holes += 1;
                Expr::Var {
                    meta,
                    constructor: (),
                    name: hole_arg_name.to_string(),
                }
            }
        }).collect();
        let call = Expr::Call {
            meta: meta(s, e),
            typ: (),
            fun: Box::new(fun),
            args: args,
        };
        match num_holes {
            // A normal call
            0 => Ok(call),

            // An anon function using the capture syntax run(_, 1, 2)
            1 => Ok(Expr::Fn {
                meta: call.meta().clone(),
                typ: (),
                is_capture: true,
                args: vec![Arg {
                    meta: meta(0, 0),
                    annotation: None,
                    name: Some(hole_arg_name.to_string())
                }],
                body: Box::new(call),
            }),

            count => Err(lalrpop_util::ParseError::User {
                error: Error::TooManyHolesInCapture {
                    meta: call.meta().clone(),
                    count
                },
            })
        }
    }
}

CallArg: Result<UntypedExpr, crate::ast::Meta> = {
    <arg:OpOrSimpleExpr> => Ok(arg),
    <s:@L> DiscardName <e:@L> => Err(meta(s, e)),
}

AnonStruct: UntypedExpr = {
    <s:@L> "struct" "(" <elems:Comma<OpOrSimpleExpr>> ")" <e:@L> => Expr::AnonStruct {
        meta: meta(s, e),
        typ: (),
        elems: elems,
    }
}

List: UntypedExpr = {
    "[" <elems:Comma<OpOrSimpleExpr>> <tail:("|" <OpOrSimpleExpr>)?>"]" <e:@L> => {
        let tail = tail.unwrap_or_else(|| Expr::Nil {
            meta: meta(e - 1, e),
            typ: (),
        });
        elems.into_iter().rev().fold(
            tail,
            |t, h| Expr::Cons {
                meta: t.meta().clone(),
                typ: (),
                head: Box::new(h),
                tail: Box::new(t),
            }
        )
    }
}

Var: UntypedExpr = {
    <s:@L> <v:VarName> <e:@L> => Expr::Var {
        meta: meta(s, e),
        constructor: (),
        name: v,
    },

    <s:@L> <v:UpName> <e:@L> => Expr::Var {
        meta: meta(s, e),
        constructor: (),
        name: v,
    }
}

Nil: UntypedExpr = {
    <s:@L> "[]" <e:@L> => Expr::Nil {
        meta: meta(s, e),
        typ: (),
    }
}

String: UntypedExpr = {
    <s:@L> <x:RawString> <e:@L> => Expr::String {
        meta: meta(s, e),
        typ: (),
        value: x,
    }
}

Int: UntypedExpr = {
    <s:@L> <i:r"-?[0-9]+"> <e:@L> => Expr::Int {
        meta: meta(s, e),
        typ: (),
        value: i64::from_str(i).unwrap(),
    }
}

Float: UntypedExpr = {
    <s:@L> <f:r"-?[0-9]+\.+[0-9]*"> <e:@L> => Expr::Float {
        meta: meta(s, e),
        typ: (),
        value: f64::from_str(f).unwrap(),
    }
}

MapField: (String, UntypedExpr) = {
    <l:VarName> "=" <v:OpOrSimpleExpr> => {
        (l, v)
    }
}

MapFields: Vec<(String, UntypedExpr)> = {
    MapField => vec![<>],

    <x:MapField> "," => vec![x],

    <x:MapField> "," <xs:MapFields> => {
        let mut xs = xs;
        xs.push(x);
        xs
    }
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

AtLeastOneComma<T>: Vec<T> = {
    <v:(<T> ",")+> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Op<Operator, Current, Next>: UntypedExpr = {
    <s:@L> <l:(<Current>)> <o:(<Operator>)> <r:Next> <e:@L> => Expr::BinOp {
        meta: meta(s, e),
        typ: (),
        name: o,
        left: Box::new(l),
        right: Box::new(r),
    },
}

Pattern: UntypedPattern = {
    PatternVar => <>,
    PatternInt => <>,
    PatternNil => <>,
    PatternCons => <>,
    PatternList => <>,
    PatternFloat => <>,
    PatternString => <>,
    PatternDiscard => <>,
    PatternAnonStruct => <>,
    PatternConstructor => <>,
}

PatternConstructor: UntypedPattern = {
    <s:@L> <module:(<VarName> ".")?> <name:UpName> <args:PatternConstructorArgs?> <e:@L> => Pattern::Constructor {
        meta: meta(s, e),
        args: args.unwrap_or_else(|| vec![]),
        constructor: (),
        module,
        name,
    },
}

PatternConstructorArgs: Vec<UntypedPattern> = {
    "(" <ts:Comma<Pattern>> ")" => ts
}

PatternAnonStruct: UntypedPattern = {
    <s:@L> "struct" "(" <elems:Comma<Pattern>> ")" <e:@L> => Pattern::AnonStruct {
        meta: meta(s, e),
        elems,
    }
}

PatternFloat: UntypedPattern = {
    <s:@L> <f:r"-?[0-9]+\.+[0-9]*"> <e:@L> => Pattern::Float {
        meta: meta(s, e),
        value: f64::from_str(f).unwrap(),
    }
}

PatternString: UntypedPattern = {
    <s:@L> <a:RawString> <e:@L> => Pattern::String {
        meta: meta(s, e),
        value: a,
    }
}

PatternInt: UntypedPattern = {
    <s:@L> <i:r"-?[0-9]+"> <e:@L> => Pattern::Int {
        meta: meta(s, e),
        value: i64::from_str(i).unwrap(),
    }
}

PatternVar: UntypedPattern = {
    <s:@L> <v:VarName> <e:@L> => Pattern::Var {
        meta: meta(s, e),
        name: v,
    }
}

PatternDiscard: UntypedPattern = {
    <s:@L> <_d:DiscardName> <e:@L> => Pattern::Discard {
        meta: meta(s, e),
    }
}

PatternNil: UntypedPattern = {
    <s:@L> "[]" <e:@L> => Pattern::Nil {
        meta: meta(s, e),
    }
}

PatternList: UntypedPattern = {
    <s:@L> "[" <elems:Comma<Pattern>> "]" <e:@L> => {
        elems.into_iter().rev().fold(
            Pattern::Nil {
                meta: meta(e - 1, e),
            },
            |a, e| Pattern::Cons {
                meta: e.meta().clone(),
                head: Box::new(e),
                tail: Box::new(a),
            }
        )
    }
}

PatternCons: UntypedPattern = {
    <s:@L> "[" <head:Pattern> "|" <tail:Pattern> "]" <e:@L> => Pattern::Cons {
        meta: meta(s, e),
        head: Box::new(head),
        tail: Box::new(tail),
    }
}

Type: TypeAst = {
    TypeConstructor => <>,
    TypeAnonStruct => <>,
    TypeMap => <>,
    TypeVar => <>,
    TypeFn => <>,
}

TypeMap: TypeAst = {
    <s:@L> "{}" <e:@L> => TypeAst::Map {
        meta: meta(s, e),
        fields: vec![],
        tail: None,
    },

    <s:@L> "{" <tail:TypeMapTail?> <fields:Comma<TypeMapField>> "}" <e:@L> => TypeAst::Map {
        meta: meta(s, e),
        fields,
        tail,
    },
}

TypeMapTail: Box<TypeAst> = {
    <s:@L> <n:VarName> <e:@L> "|" => Box::new(TypeAst::Var {
        meta: meta(s, e),
        name: n,
    })
}

TypeMapField: (String, TypeAst) = {
    <l:VarName> "=" <t:Type> => (l, t)
}

TypeConstructor: TypeAst = {
    <s:@L> <m:VarName> "." <n:UpName> <e:@L> => TypeAst::Constructor {
        meta: meta(s, e),
        module: Some(m),
        args: vec![],
        name: n.to_string(),
    },

    <s:@L> <m:VarName> "." <n:UpName> "(" <a:Comma<Type>> ")" <e:@L> => TypeAst::Constructor {
        meta: meta(s, e),
        module: Some(m),
        args: a,
        name: n.to_string(),
    },

    <s:@L> <n:UpName> <e:@L> => TypeAst::Constructor {
        meta: meta(s, e),
        module: None,
        args: vec![],
        name: n.to_string(),
    },

    <s:@L> <n:UpName> "(" <a:Comma<Type>> ")" <e:@L> => TypeAst::Constructor {
        meta: meta(s, e),
        module: None,
        args: a,
        name: n.to_string(),
    },
}

TypeAnonStruct: TypeAst = {
    <s:@L> "struct" "(" <elems:AtLeastOneComma<Type>> ")" <e:@L> => TypeAst::AnonStruct {
        meta: meta(s, e),
        elems: elems,
    }
}


TypeVar: TypeAst = {
    <s:@L> <n:VarName> <e:@L> => TypeAst::Var {
        meta: meta(s, e),
        name: n,
    }
}

TypeFn: TypeAst = {
    <s:@L> "fn(" <args:Comma<Type>> ")" "->" <retrn:Type> <e:@L> => TypeAst::Fn {
        meta: meta(s, e),
        retrn: Box::new(retrn),
        args,
    }
}

TypeName: (String, Vec<String>) = {
    <v:UpName> => (v, vec![]),
    <v:UpName> "(" <a:Comma<VarName>> ")" => (v, a),
}

UpName: String = {
    <v:r"[A-Z][0-9A-Za-z]*"> => v.to_string()
}

DiscardName: () = {
    <v:r"_[A-Za-z_]*"> => ()
}

AnyName: String = {
    VarName => <>,
    UpName => <>
}

VarName: String = {
    <v:r"[a-z][0-9a-z_]*"> => v.to_string()
}

ConstructorName: String = {
    <v:r"[A-Z][0-9A-Za-z]*"> => v.to_string()
}

RawString: String = {
    <x:r#""(([^\\"]|\\.)*)""#> => x[1..(x.len() - 1)].to_string(),
}
