// vi: ft=rust

use std::str::FromStr;

use crate::ast::{
    UntypedExpr, UntypedArg, Arg, UntypedModule, Module, UntypedStatement, Statement, TypeAst,
    UntypedPattern, BinOp, Clause, UntypedClause, RecordConstructor, Pattern, CallArg,
    ExternalFnArg, ArgNames, UnqualifiedImport, UntypedClauseGuard, ClauseGuard,
};
use crate::parser::*;

grammar;

extern {
    type Error = crate::parser::Error;
}

pub Module: UntypedModule = {
    <statements:Statement*> => Module {
        type_info: (),
        name: vec![],
        statements: statements,
    }
}

Statement: UntypedStatement = {
    StatementFn => <>,
    StatementTypeAlias => <>,
    StatementCustomType => <>,
    StatementExternalFn => <>,
    StatementExternalType => <>,
    StatementImport => <>,
}

StatementTypeAlias : UntypedStatement = {
    <s:@L> <p:"pub"?> "type" <ta:TypeName> "=" <tr:Type> <e:@L> => Statement::TypeAlias {
        doc: None,
        location: location(s, e),
        public: p.is_some(),
        alias: ta.0,
        args: ta.1,
        resolved_type: tr,
        typ: (),
    }
}

StatementCustomType: UntypedStatement = {
    <s:@L> <p:"pub"?> "type" <t:TypeName> <e:@L> "{" <cs:RecordConstructor+> "}" => Statement::CustomType {
        doc: None,
        location: location(s, e),
        public: p.is_some(),
        name: t.0,
        args: t.1,
        constructors: cs,
    }
}

RecordConstructor: RecordConstructor = {
    <s:@L> <t:UpName> <args:RecordConstructorArgs?> <e:@L> => RecordConstructor {
        location: location(s, e),
        name: t,
        args: args.unwrap_or_else(|| vec![]),
    },
}

RecordConstructorArgs: Vec<(Option<String>, TypeAst)> = {
    "(" <ts:Comma<RecordConstructorArg>> ")" => ts
}

RecordConstructorArg: (Option<String>, TypeAst) = {
    <label:(<VarName> ":")?> <typ:Type> => (label, typ),
}

StatementExternalFn: UntypedStatement = {
    <s:@L> <p:"pub"?> "external" "fn" <n:VarName> "(" <a:Comma<ExternalFnArg>> ")" "->" <r:Type> "=" <m:RawString> <f:RawString> <e:@L> => Statement::ExternalFn {
        doc: None,
        location: location(s, e),
        public: p.is_some(),
        name: n,
        args: a,
        module: m,
        fun: f,
        retrn: r,
        return_type: (),
    }
}

ExternalFnArg: ExternalFnArg = {
    <label:(<VarName> ":")?> <typ:Type> => ExternalFnArg {
        label,
        typ,
    },
}

StatementFn: UntypedStatement = {
    <s:@L> <p:"pub"?> "fn" <n:VarName> "(" <a:Comma<FnArg>> ")" <return_annotation:("->" <Type>)?> "{" <b:Expr+> "}" <e:@L> => Statement::Fn {
        doc: None,
        location: location(s, e),
        public: p.is_some(),
        name: n,
        args: a,
        body: seq(b),
        return_type: (),
        return_annotation,
    }
}

StatementImport: UntypedStatement = {
    "import" <s:@L> <ns:(<VarName> "/")*> <n:VarName> <e:@L> <unqualified:("." "{" <Comma<UnqualifiedImport>>"}")?> <as_name:("as" <VarName>)?> => {
        let mut module = ns;
        module.push(n);
        Statement::Import {
            location: location(s, e),
            unqualified: unqualified.unwrap_or_else(|| vec![]),
            module,
            as_name,
        }
    }
}

UnqualifiedImport: UnqualifiedImport = {
    <s:@L> <name:AnyName> <as_name:("as" <VarName>)?> <e:@L> => UnqualifiedImport {
        location: location(s, e),
        name,
        as_name
    }
}

StatementExternalType: UntypedStatement = {
    <s:@L> <p:"pub"?> "external" "type" <n:TypeName> <e:@L> => Statement::ExternalType {
        doc: None,
        location: location(s, e),
        public: p.is_some(),
        name: n.0,
        args: n.1,
    }
}

pub Expr: UntypedExpr = {
    Let => <>,
    OpOrSimpleExpr => <>,
}

OpOrSimpleExpr: UntypedExpr = {
    <o:Op<OrOp, OpOrSimpleExpr, Op2>> => <>,
    Op2 => <>,
}

OrOp: BinOp = {
    "||" => BinOp::Or,
}

Op2: UntypedExpr = {
    <o:Op<AndOp, Op2, Op3>> => <>,
    Op3 => <>,
}

AndOp: BinOp = {
    "&&" => BinOp::And,
}

Op3: UntypedExpr = {
    <o:Op<EqOp, Op3, Op4>> => <>,
    Op4 => <>,
}

EqOp: BinOp = {
    "==" => BinOp::Eq,
    "!=" => BinOp::NotEq,
}

Op4: UntypedExpr = {
    <o:Op<CompareOp, Op4, Op5>> => <>,
    Op5 => <>,
}

CompareOp: BinOp = {
    "<" => BinOp::LtInt,
    "<=" => BinOp::LtEqInt,
    ">" => BinOp::GtInt,
    ">=" => BinOp::GtEqInt,
    "<." => BinOp::LtFloat,
    "<=." => BinOp::LtEqFloat,
    ">." => BinOp::GtFloat,
    ">=." => BinOp::GtEqFloat,
}

Op5: UntypedExpr = {
    <s:@L> <l:Op5> "|>" <r:Op6> <e:@L> => UntypedExpr::Pipe {
        location: location(s, e),
        left: Box::new(l),
        right: Box::new(r),
    },

    Op6 => <>,
}

Op6: UntypedExpr = {
    <o:Op<AddOp, Op6, Op7>> => <>,
    Op7 => <>,
}

AddOp: BinOp = {
    "+" => BinOp::AddInt,
    "+." => BinOp::AddFloat,
    "-" => BinOp::SubInt,
    "-." => BinOp::SubFloat,
}

Op7: UntypedExpr = {
    <o:Op<MultOp, Op7, SimpleExpr>> => <>,
    SimpleExpr => <>,
}

MultOp: BinOp = {
    "%" => BinOp::ModuloInt,
    "*" => BinOp::MultInt,
    "*." => BinOp::MultFloat,
    "/" => BinOp::DivInt,
    "/." => BinOp::DivFloat,
}

SimpleExpr: UntypedExpr = {
    Fn => <>,
    Nil => <>,
    Int => <>,
    Var => <>,
    Todo => <>,
    Case => <>,
    List => <>,
    Call => <>,
    Float => <>,
    Tuple => <>,
    String => <>,
    FieldAccess => <>,
    "{" <e:Expr+> "}" => seq(e),
}

Case: UntypedExpr = {
    <s:@L> "case" <subjects:CommaNoTrailing<OpOrSimpleExpr>> "{" <clauses:Clause+> "}" <e:@L> => UntypedExpr::Case {
        location: location(s, e),
        subjects,
        clauses,
    },
}

Clause: UntypedClause = {
    <s:@L> <pattern:Comma<Pattern>> <alternative_patterns:("|" <DelimNoTrailing<Comma<Pattern>, "|">>)?> <guard:("if" <ClauseGuard>)?> "->" <then:OpOrSimpleExpr> <e:@L> => Clause {
        location: location(s, e),
        pattern,
        alternative_patterns: alternative_patterns.unwrap_or_else(|| vec![]),
        guard,
        then,
    }
}

ClauseGuard: UntypedClauseGuard = {
    ClauseGuard1 => <>
}


ClauseGuard1: UntypedClauseGuard = {
    <s:@L> <left:ClauseGuard1> "||" <right:ClauseGuard2> <e:@L> => ClauseGuard::Or {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    ClauseGuard2 => <>,
}

ClauseGuard2: UntypedClauseGuard = {
    <s:@L> <left:ClauseGuard2> "&&" <right:ClauseGuard3> <e:@L> => ClauseGuard::And {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    ClauseGuard3 => <>,
}

ClauseGuard3: UntypedClauseGuard = {
    <s:@L> <left:ClauseGuard3> "==" <right:ClauseGuard4> <e:@L> => ClauseGuard::Equals {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    <s:@L> <left:ClauseGuard3> "!=" <right:ClauseGuard4> <e:@L> => ClauseGuard::NotEquals {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    ClauseGuard4 => <>,
}

ClauseGuard4: UntypedClauseGuard = {
    <s:@L> <left:ClauseGuard4> ">" <right:ClauseGuard5> <e:@L> => ClauseGuard::GtInt {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    ClauseGuard5 => <>,
}

ClauseGuard5: UntypedClauseGuard = {
    <s:@L> <left:ClauseGuard5> ">." <right:ClauseGuard6> <e:@L> => ClauseGuard::GtFloat {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    ClauseGuard6 => <>,
}

ClauseGuard6: UntypedClauseGuard = {
    <s:@L> <left:ClauseGuard6> ">=." <right:ClauseGuard7> <e:@L> => ClauseGuard::GtEqFloat {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    ClauseGuard7 => <>,
}

ClauseGuard7: UntypedClauseGuard = {
    <s:@L> <left:ClauseGuard7> "<." <right:ClauseGuard8> <e:@L> => ClauseGuard::LtFloat {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    ClauseGuard8 => <>,
}

ClauseGuard8: UntypedClauseGuard = {
    <s:@L> <left:ClauseGuard8> "<=." <right:ClauseGuard9> <e:@L> => ClauseGuard::LtEqFloat {
        location: location(s, e),
        typ: (),
        left: Box::new(left),
        right: Box::new(right),
    },

    ClauseGuard9 => <>,
}

ClauseGuard9: UntypedClauseGuard = {
    <s:@L> <name:VarName> <e:@L> => ClauseGuard::Var {
        location: location(s, e),
        typ: (),
        name,
    },

    "{" <ClauseGuard> "}" => <>,
}

Let: UntypedExpr = {
    <s:@L> "let" <p:Pattern> "=" <v:OpOrSimpleExpr> <e:@L> <t:Expr> => UntypedExpr::Let {
        location: location(s, e),
        value: Box::new(v),
        pattern: p,
        then: Box::new(t),
    }
}

FieldAccess: UntypedExpr = {
    <r:SimpleExpr> <s:@L> "." <label:AnyName> <e:@L> => UntypedExpr::FieldAccess {
        location: location(s, e),
        label,
        container: Box::new(r),
    },

    <r:SimpleExpr> <s:@L> "." <index:PositiveRawInt> <e:@L> => UntypedExpr::TupleIndex {
        location: location(s, e),
        index,
        tuple: Box::new(r),
    },
}

Fn: UntypedExpr = {
    <s:@L> "fn(" <a:Comma<FnArg>> ")" <return_annotation:("->" <Type>)?> "{" <b:Expr+> "}" <e:@L> => UntypedExpr::Fn {
        location: location(s, e),
        is_capture: false,
        args: a,
        body: Box::new(seq(b)),
        return_annotation,
    },
}

FnArg: UntypedArg = {
    <s:@L> <names:ArgNames> <annotation:(":" <Type>)?> <e:@L> => Arg {
        location: location(s, e),
        typ: (),
        names,
        annotation,
    },
}

ArgNames: ArgNames = {
    <name:DiscardName> => ArgNames::Discard { name },

    <name:VarName> => ArgNames::Named { name },

    <label:VarName> <name:VarName> => ArgNames::NamedLabelled { name, label },

    <label:VarName> <name:DiscardName> => ArgNames::LabelledDiscard { label, name },
}

Call: UntypedExpr = {
    <s:@L> <fun:SimpleExpr> "(" <args:Comma<CallArg>> ")" <e:@L> =>? {
        let hole_arg_name = "capture@1"; // TODO: model placeholder arguments in a less hacky way. This value can leak to the user in error messages.
        let mut num_holes = 0;
        let args = args
            .into_iter()
            .map(|a| match a {
                Ok(arg) => arg,
                Err((location, label)) => {
                    num_holes += 1;
                    CallArg {
                        label,
                        location: Default::default(),
                        value: UntypedExpr::Var {
                            location,
                            name: hole_arg_name.to_string(),
                        }
                    }
                }
            })
            .collect();
        let call = UntypedExpr::Call {
            location: location(s, e),
            fun: Box::new(fun),
            args,
        };
        match num_holes {
            // A normal call
            0 => Ok(call),

            // An anon function using the capture syntax run(_, 1, 2)
            1 => Ok(UntypedExpr::Fn {
                location: call.location().clone(),
                is_capture: true,
                args: vec![Arg {
                    location: location(0, 0),
                    annotation: None,
                    names: ArgNames::Named{ name: hole_arg_name.to_string() },
                    typ: (),
                }],
                body: Box::new(call),
                return_annotation: None,
            }),

            count => Err(lalrpop_util::ParseError::User {
                error: Error::TooManyHolesInCapture {
                    location: call.location().clone(),
                    count
                },
            })
        }
    }
}

CallArg: Result<CallArg<UntypedExpr>, (crate::ast::SrcSpan, Option<String>)> = {
    <s:@L> <label:(<VarName> ":")?> <value:OpOrSimpleExpr> <e:@L> => Ok(CallArg { label, value, location: location(s, e) }),
    <s:@L> <label:(<VarName> ":")?> DiscardName <e:@L> => Err((location(s, e), label)),
}

Tuple: UntypedExpr = {
    <s:@L> "tuple" "(" <elems:Comma<OpOrSimpleExpr>> ")" <e:@L> => UntypedExpr::Tuple {
        location: location(s, e),
        elems: elems,
    }
}

List: UntypedExpr = {
    <s:@L> "[" <elems:Comma<OpOrSimpleExpr>> <tail:("|" <OpOrSimpleExpr>)?>"]" <e:@L> => {
        let tail = tail.unwrap_or_else(|| UntypedExpr::ListNil {
            location: location(s, e),
        });
        elems.into_iter().rev().fold(
            tail,
            |t, h| UntypedExpr::ListCons {
                location: t.location().clone(),
                head: Box::new(h),
                tail: Box::new(t),
            }
        )
    }
}

Var: UntypedExpr = {
    <s:@L> <v:VarName> <e:@L> => UntypedExpr::Var {
        location: location(s, e),
        name: v,
    },

    <s:@L> <v:UpName> <e:@L> => UntypedExpr::Var {
        location: location(s, e),
        name: v,
    }
}

Todo: UntypedExpr = {
    <s:@L> "todo" <e:@L> => UntypedExpr::Todo {
        location: location(s, e),
    }
}

Nil: UntypedExpr = {
    <s:@L> "[]" <e:@L> => UntypedExpr::ListNil {
        location: location(s, e),
    }
}

String: UntypedExpr = {
    <s:@L> <x:RawString> <e:@L> => UntypedExpr::String {
        location: location(s, e),
        value: x,
    }
}

PositiveIntLiteral: String = {
    <pos:r"[0-9]+"> => pos.to_string()
}

NegativeIntLiteral: String = {
    <neg:r"-[0-9]+"> => neg.to_string()
}

IntLiteral: String = {
    PositiveIntLiteral => <>,
    NegativeIntLiteral => <>,
}

PositiveRawInt: u64 = {
    <pos:PositiveIntLiteral> => u64::from_str(pos.as_ref()).unwrap(),
}

Int: UntypedExpr = {
    <s:@L> <value:IntLiteral> <e:@L> => UntypedExpr::Int {
        location: location(s, e),
        value,
    }
}

Float: UntypedExpr = {
    <s:@L> <f:r"-?[0-9]+\.+[0-9]*"> <e:@L> => UntypedExpr::Float {
        location: location(s, e),
        value: f.to_string(),
    }
}

DelimNoTrailing<T, Delimeter>: Vec<T> = {
    <v:(<T> Delimeter)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
}

Delim<T, Delimeter>: Vec<T> = {
    <v:(<T> Delimeter)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Comma<T>: Vec<T> = {
    Delim<T, ","> => <>
}

CommaNoTrailing<T>: Vec<T> = {
    DelimNoTrailing<T, ","> => <>
}

Op<Operator, Current, Next>: UntypedExpr = {
    <s:@L> <l:(<Current>)> <o:(<Operator>)> <r:Next> <e:@L> => UntypedExpr::BinOp {
        location: location(s, e),
        name: o,
        left: Box::new(l),
        right: Box::new(r),
    },
}

Pattern: UntypedPattern = {
    PatternVar => <>,
    PatternLet => <>,
    PatternInt => <>,
    PatternNil => <>,
    PatternList => <>,
    PatternFloat => <>,
    PatternString => <>,
    PatternDiscard => <>,
    PatternTuple => <>,
    PatternConstructor => <>,
}

PatternConstructor: UntypedPattern = {
    <s:@L> <module:(<VarName> ".")?> <name:UpName> <args:PatternConstructorArgs?> <e:@L> => Pattern::Constructor {
        location: location(s, e),
        args: args.unwrap_or_else(|| vec![]),
        constructor: (),
        module,
        name,
    },
}

PatternConstructorArgs: Vec<CallArg<UntypedPattern>> = {
    "(" <args:Comma<PatternConstructorArg>> ")" => args

}

PatternConstructorArg: CallArg<UntypedPattern> = {
    <s:@L> <label:(<VarName> ":")?> <value:Pattern> <e:@L> => CallArg {
        location: location(s, e),
        label,
        value,
    },
}

PatternTuple: UntypedPattern = {
    <s:@L> "tuple" "(" <elems:Comma<Pattern>> ")" <e:@L> => Pattern::Tuple {
        location: location(s, e),
        elems,
    }
}

PatternFloat: UntypedPattern = {
    <s:@L> <f:r"-?[0-9]+\.+[0-9]*"> <e:@L> => Pattern::Float {
        location: location(s, e),
        value: f.to_string(),
    }
}

PatternString: UntypedPattern = {
    <s:@L> <a:RawString> <e:@L> => Pattern::String {
        location: location(s, e),
        value: a,
    }
}

PatternInt: UntypedPattern = {
    <s:@L> <value:IntLiteral> <e:@L> => Pattern::Int {
        location: location(s, e),
        value,
    }
}

PatternLet: UntypedPattern = {
    <p:Pattern> "as" <name:VarName> => Pattern::Let {
        name,
        pattern: Box::new(p),
    }
}

PatternVar: UntypedPattern = {
    <s:@L> <v:VarName> <e:@L> => Pattern::Var {
        location: location(s, e),
        name: v,
    }
}

PatternDiscard: UntypedPattern = {
    <s:@L> <name:DiscardName> <e:@L> => Pattern::Discard {
        location: location(s, e),
        name,
    }
}

PatternNil: UntypedPattern = {
    <s:@L> "[]" <e:@L> => Pattern::Nil {
        location: location(s, e),
    }
}

PatternVarOrDiscard: UntypedPattern = {
    PatternVar => <>,
    PatternDiscard => <>,
}

PatternList: UntypedPattern = {
    <s:@L> "[" <elems:Comma<Pattern>> <tail:("|" <PatternVarOrDiscard>)?> "]" <e:@L> => {
        let tail = tail.unwrap_or_else(|| Pattern::Nil {
            location: location(e - 1, e),
        });
        elems.into_iter().rev().fold(
            tail,
            |a, e| Pattern::Cons {
                location: e.location().clone(),
                head: Box::new(e),
                tail: Box::new(a),
            }
        )
    }
}

Type: TypeAst = {
    TypeConstructor => <>,
    TypeTuple => <>,
    TypeVar => <>,
    TypeFn => <>,
}

TypeTuple: TypeAst = {
    <s:@L> "tuple" "(" <elems:Comma<Type>> ")" <e:@L> => TypeAst::Tuple {
        location: location(s, e),
        elems: elems,
    }
}

TypeConstructor: TypeAst = {
    <s:@L> <m:VarName> "." <n:UpName> <e:@L> => TypeAst::Constructor {
        location: location(s, e),
        module: Some(m),
        args: vec![],
        name: n.to_string(),
    },

    <s:@L> <m:VarName> "." <n:UpName> "(" <a:Comma<Type>> ")" <e:@L> => TypeAst::Constructor {
        location: location(s, e),
        module: Some(m),
        args: a,
        name: n.to_string(),
    },

    <s:@L> <n:UpName> <e:@L> => TypeAst::Constructor {
        location: location(s, e),
        module: None,
        args: vec![],
        name: n.to_string(),
    },

    <s:@L> <n:UpName> "(" <a:Comma<Type>> ")" <e:@L> => TypeAst::Constructor {
        location: location(s, e),
        module: None,
        args: a,
        name: n.to_string(),
    },
}

TypeVar: TypeAst = {
    <s:@L> <n:VarName> <e:@L> => TypeAst::Var {
        location: location(s, e),
        name: n,
    }
}

TypeFn: TypeAst = {
    <s:@L> "fn(" <args:Comma<Type>> ")" "->" <retrn:Type> <e:@L> => TypeAst::Fn {
        location: location(s, e),
        retrn: Box::new(retrn),
        args,
    }
}

TypeName: (String, Vec<String>) = {
    <v:UpName> => (v, vec![]),
    <v:UpName> "(" <a:Comma<VarName>> ")" => (v, a),
}

UpName: String = {
    <v:r"[A-Z][0-9A-Za-z]*"> => v.to_string()
}

DiscardName: String = {
    <v:r"_[A-Za-z_]*"> => v.to_string()
}

AnyName: String = {
    VarName => <>,
    UpName => <>
}

VarName: String = {
    <v:r"[a-z][0-9a-z_]*"> => v.to_string()
}

ConstructorName: String = {
    <v:r"[A-Z][0-9A-Za-z]*"> => v.to_string()
}

RawString: String = {
    <x:r#""(([^\\"]|\\.)*)""#> => x[1..(x.len() - 1)].to_string(),
}
