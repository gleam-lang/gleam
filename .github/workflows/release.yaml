name: release
on:
  push:
    tags:
      - 'v*'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux-amd64, macos, windows-64bit]
        toolchain: [stable]
        include:
        - build: linux-amd64
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
          use-cross: true
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
          use-cross: false
        - build: windows-64bit
          os: windows-latest
          target: x86_64-pc-windows-msvc
          use-cross: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ARCHIVE="gleam-$VERSION-${{ matrix.build }}.zip"
            cp "target/${{ matrix.target }}/release/gleam.exe" "gleam.exe"
            7z a "$ARCHIVE" "gleam.exe"
            echo "ASSET=$ARCHIVE" >> $GITHUB_ENV
          else
            ARCHIVE="gleam-$VERSION-${{ matrix.build }}.tar.gz"
            cp "target/${{ matrix.target }}/release/gleam" "gleam"
            tar -czvf "$ARCHIVE" "gleam"
            echo "ASSET=$ARCHIVE" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/gzip
  publish-docker:
    name: publish-docker
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build docker image
        run: docker build --file Dockerfile.elixir --tag gleam-elixir .

      - name: Authenticate with github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$gleam

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag gleam $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION