name: release-nightly

on:
  schedule:
    - cron: '0 0 * * *'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build-nightly-clean:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: nightly
          assets: |
            *.zip
            *.tar.gz
            *.sha256
            *.sha512

  build-nightly:
    name: build-release
    runs-on: ${{ matrix.os }}
    needs: [ build-nightly-clean ]
    strategy:
      matrix:
        build:
          - macos
          - macos-arm64
          - windows-64bit
        toolchain: [stable]
        include:
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
          - build: macos-arm64
            os: macos-11
            target: aarch64-apple-darwin
          - build: windows-64bit
            os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Update versions
        shell: bash
        run: |
          version=nightly-$(date +"%y%m%d")
          sed -i "s/version = \".*\"/version = \"$version\"" compile-core/Cargo.toml
          sed -i "s/version = \".*\"/version = \"$version\"" compile-wasm/Cargo.toml
          sed -i "s/version = \".*\"/version = \"$version\"" compile-cli/Cargo.toml

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          override: true
          default: true
          profile: minimal

      - name: Handle Rust dependencies caching
        uses: Swatinem/rust-cache@v1
        with:
          key: v1-${{ matrix.target }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Build archive
        shell: bash
        run: |
          VERSION=nightly-$(date +"%y%m%d")

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ARCHIVE="gleam-$VERSION-${{ matrix.build }}.zip"
            cp "target/release/gleam.exe" "gleam.exe"
            7z a "$ARCHIVE" "gleam.exe"
            rm gleam.exe
          else
            ARCHIVE="gleam-$VERSION-${{ matrix.build }}.tar.gz"
            cp "target/release/gleam" "gleam"
            tar -czvf "$ARCHIVE" "gleam"
            rm gleam
          fi

          openssl dgst -r -sha256 -out "$ARCHIVE".sha256 "$ARCHIVE"
          openssl dgst -r -sha512 -out "$ARCHIVE".sha512 "$ARCHIVE"
          echo "ASSET=$ARCHIVE" >> $GITHUB_ENV

      - name: Ensure binary successfully boots
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z x "$ASSET"
            ./gleam.exe --version
          elif [ "${{ matrix.build }}" = "macos-arm64" ]; then
            echo We cannot test an ARM binary on a AMD64 runner
          else
            tar -xvzf "$ASSET"
            ./gleam --version
          fi

      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: true
          fail_on_unmatched_files: true
          name: "Nightly"
          tag_name: "nightly"
          files: |
            ${{ env.ASSET }}
            ${{ env.ASSET }}.sha256
            ${{ env.ASSET }}.sha512

  build-nightly-musl:
    runs-on: ubuntu-latest
    container: clux/muslrust:stable
    needs: [ build-nightly-clean ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Update versions
        shell: bash
        run: |
          version=nightly-$(date +"%y%m%d")
          sed -i "s/version = \".*\"/version = \"$version\"" compile-core/Cargo.toml
          sed -i "s/version = \".*\"/version = \"$version\"" compile-wasm/Cargo.toml
          sed -i "s/version = \".*\"/version = \"$version\"" compile-cli/Cargo.toml

      - name: Link to predefined musl toolchain
        run: |
          ln -s /root/.cargo $HOME/.cargo
          ln -s /root/.rustup $HOME/.rustup

      - name: Handle Rust dependencies caching
        uses: Swatinem/rust-cache@v1
        with:
          key: v1-linux-musl

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Build archive
        shell: bash
        run: |
          VERSION=nightly-$(date +"%y%m%d")

          ARCHIVE="gleam-$VERSION-linux-amd64.tar.gz"
          cp "target/x86_64-unknown-linux-musl/release/gleam" "gleam"
          tar -czvf "$ARCHIVE" "gleam"
          openssl dgst -r -sha256 -out "$ARCHIVE".sha256 "$ARCHIVE"
          openssl dgst -r -sha512 -out "$ARCHIVE".sha512 "$ARCHIVE"
          echo "ASSET=$ARCHIVE" >> $GITHUB_ENV

      - name: Ensure binary successfully boots
        shell: bash
        run: |
          tar -xvzf "$ASSET"
          ./gleam --version

      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: true
          fail_on_unmatched_files: true
          name: "Nightly"
          tag_name: "nightly"
          files: |
            ${{ env.ASSET }}
            ${{ env.ASSET }}.sha256
            ${{ env.ASSET }}.sha512
