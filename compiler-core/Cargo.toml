[package]
name = "gleam-core"
version = "1.0.0"
authors = ["Louis Pilfold <louis@lpil.uk>"]
edition = "2021"
license-file = "LICENCE"

[dependencies]
# Immutable data structures
im.workspace = true
# Error message and warning formatting
codespan-reporting = "0.11.1"
termcolor.workspace = true
# Logging
tracing.workspace = true
# Extra iter methods
itertools.workspace = true
# String case conversion
heck = "0.4.0"
# Parsing
regex.workspace = true
# Graph data structures
petgraph = "0.6.0"
# Levenshtein string distance for typo suggestions
strsim = "0.10.0"
# Data (de)serialisation
serde.workspace = true
serde_json.workspace = true
# Cap'n Proto binary format runtime
capnp = "0.14.3"
# Enum trait impl macros
strum.workspace = true
# Template rendering
askama = "0.12.0"
# Markdown parsing
pulldown-cmark = { version = "0.8.0", default-features = false }
# Non-empty vectors
vec1 = "1.8.0"
# Hex package manager client
hexpm.workspace = true
# XDG directory locations
dirs-next = "2.0.0"
# HTTP types
http.workspace = true
# Byte collections
bytes.workspace = true
# Macro to work around Rust's traits not working with async. Sigh.
async-trait.workspace = true
# Little helper to omit fields that cannot be debug printed
debug-ignore.workspace = true
# std::error::Error definition macro
thiserror.workspace = true
# Async combinators for futures
futures.workspace = true
# Creation of tar file archives
tar.workspace = true
# gzip compression
flate2.workspace = true
# Helper for wrapping text onto lines based upon width
textwrap = { version = "=0.15.0", features = ["terminal_size"] }
# base encoding
base16.workspace = true
# toml config file parsing
toml.workspace = true
# SPDX license parsing
spdx = "0.8.0"
# Binary format de-serialization
bincode = "1.3.3"
# cross platform single glob and glob set matching
globset = { version = "0.4.9", features = ["serde1"] }
# Compact clone-on-write vector & string type
ecow = { workspace = true, features = ["serde"] }
# Checksums
xxhash-rust = { version = "0.8.6", features = ["xxh3"] }
# Language server protocol server plumbing
lsp-server.workspace = true
lsp-types.workspace = true
# Pubgrub dependency resolution algorithm
pubgrub = "0.2"
# Drop in replacement for std::path but with only utf-8
camino = { workspace = true, features = ["serde1"] }
# Used for converting absolute path to relative path
pathdiff = { version = "0.2.1", features = ["camino"] }
# Memory arena using ids rather than references
id-arena = "2.1"

[build-dependencies]
# Data (de)serialisation
serde_derive = "1.0.130"
# Cap'n Proto binary format codegen
capnpc = "0.14.4"

[dev-dependencies]
# Test assertion errors with diffs
pretty_assertions.workspace = true
# Snapshot testing to make test maintenance easier
insta.workspace = true
# Random value generation
rand = "0.8.5"
