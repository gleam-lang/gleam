---
source: compiler-core/src/type_/tests/exhaustiveness.rs
expression: "\nimport wibble\npub type Things { Thing1 Thing2(Int) }\npub fn main() {\n    let wobble_thing = #(wibble.Wobble, Thing2(23))\n    case wobble_thing {\n        #(wibble.Wibble, Thing1) -> Nil\n    }\n}\n"
---
error: Inexhaustive patterns
  ┌─ /src/one/two.gleam:6:5
  │  
6 │ ╭     case wobble_thing {
7 │ │         #(wibble.Wibble, Thing1) -> Nil
8 │ │     }
  │ ╰─────^

This case expression does not have a pattern for all possible values.
If it is run on one of the values without a pattern then it will crash.

The missing patterns are:

    #(Wobble, Thing1)
    #(_, Thing2(_))
