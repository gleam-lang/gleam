---
source: compiler-core/src/type_/tests/errors.rs
expression: "const num: String = 7\nconst str1: MyInvalidType = \"str\"\nconst tpl: String = #(Ok(1), MyInvalidType, 3)\nconst lst = [1, 2.0]\nconst unbound: MyInvalidType = MyInvalidType\nconst assignment1err: String = num\nconst assignment2ok: String = str1\nconst assignment3err: String = tpl\nconst assignment4err: String = lst\nconst assignment5ok: String = unbound"
---
error: Type mismatch
  ┌─ /src/one/two.gleam:1:21
  │
1 │ const num: String = 7
  │                     ^

Expected type:

    String

Found type:

    Int

error: Unknown type
  ┌─ /src/one/two.gleam:2:13
  │
2 │ const str1: MyInvalidType = "str"
  │             ^^^^^^^^^^^^^

The type `MyInvalidType` is not defined or imported in this module.

error: Type mismatch
  ┌─ /src/one/two.gleam:3:21
  │
3 │ const tpl: String = #(Ok(1), MyInvalidType, 3)
  │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^

Expected type:

    String

Found type:

    #(Result(Int, a), b, Int)

error: Unknown variable
  ┌─ /src/one/two.gleam:3:30
  │
3 │ const tpl: String = #(Ok(1), MyInvalidType, 3)
  │                              ^^^^^^^^^^^^^

The name `MyInvalidType` is not in scope here.

error: Type mismatch
  ┌─ /src/one/two.gleam:4:17
  │
4 │ const lst = [1, 2.0]
  │                 ^^^

Expected type:

    Int

Found type:

    Float

error: Unknown type
  ┌─ /src/one/two.gleam:5:16
  │
5 │ const unbound: MyInvalidType = MyInvalidType
  │                ^^^^^^^^^^^^^

The type `MyInvalidType` is not defined or imported in this module.

error: Unknown variable
  ┌─ /src/one/two.gleam:5:32
  │
5 │ const unbound: MyInvalidType = MyInvalidType
  │                                ^^^^^^^^^^^^^

The name `MyInvalidType` is not in scope here.

error: Type mismatch
  ┌─ /src/one/two.gleam:6:32
  │
6 │ const assignment1err: String = num
  │                                ^^^

Expected type:

    String

Found type:

    Int

error: Type mismatch
  ┌─ /src/one/two.gleam:8:32
  │
8 │ const assignment3err: String = tpl
  │                                ^^^

Expected type:

    String

Found type:

    #(Result(Int, a), b, Int)
