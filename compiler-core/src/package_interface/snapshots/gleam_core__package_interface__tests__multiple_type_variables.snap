---
source: compiler-core/src/package_interface/tests.rs
expression: "\npub type Box(a, b)\npub fn main(a: a, b: b, c: Box(c, d)) -> Box(a, d) {}\n"
---
{
  "name": "my_package",
  "package_version": {
    "major": 11,
    "minor": 10,
    "patch": 9,
    "pre": [
      {
        "kind": "Numeric",
        "value": 1
      },
      {
        "kind": "Alphanumeric",
        "value": "foo"
      }
    ],
    "build": "build"
  },
  "gleam_version_constraint": "1.0.0",
  "modules": {
    "my/module": {
      "documentation": [],
      "type_aliases": {},
      "types": {
        "Box": {
          "documentation": null,
          "deprecation": null,
          "parameters": 2,
          "constructors": []
        }
      },
      "constants": {},
      "functions": {
        "main": {
          "documentation": null,
          "deprecation": null,
          "implementations": {
            "gleam": true,
            "uses_erlang_externals": false,
            "uses_javascript_externals": false
          },
          "parameters": [
            {
              "label": null,
              "type": {
                "kind": "Variable",
                "id": 0
              }
            },
            {
              "label": null,
              "type": {
                "kind": "Variable",
                "id": 1
              }
            },
            {
              "label": null,
              "type": {
                "kind": "Named",
                "name": "Box",
                "package": "my_package",
                "module": "my/module",
                "parameters": [
                  {
                    "kind": "Variable",
                    "id": 2
                  },
                  {
                    "kind": "Variable",
                    "id": 3
                  }
                ]
              }
            }
          ],
          "return": {
            "kind": "Named",
            "name": "Box",
            "package": "my_package",
            "module": "my/module",
            "parameters": [
              {
                "kind": "Variable",
                "id": 0
              },
              {
                "kind": "Variable",
                "id": 3
              }
            ]
          }
        }
      }
    }
  }
}
