---
source: compiler-core/src/erlang/tests/assert.rs
expression: "\nfn identity(a) {\n  a\n}\n\npub fn main() {\n  assert identity(True) as {\n    let message = identity(\"This shouldn't fail\")\n    message\n  }\n}\n"
---
----- SOURCE CODE

fn identity(a) {
  a
}

pub fn main() {
  assert identity(True) as {
    let message = identity("This shouldn't fail")
    message
  }
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([main/0]).

-file("project/test/my/mod.gleam", 2).
-spec identity(I) -> I.
identity(A) ->
    A.

-file("project/test/my/mod.gleam", 6).
-spec main() -> nil.
main() ->
    case identity(true) of
        true -> nil;
        false -> erlang:error(#{gleam_error => assert,
                message => begin
                    Message = identity(<<"This shouldn't fail"/utf8>>),
                    Message
                end,
                kind => function_call,
                arguments => [#{kind => literal,
                        value => true,
                        start => 59,
                        'end' => 63
                        }],
                assert_start => 43,
                expression_start => 50,
                expression_end => 64,
                module => <<"my/mod"/utf8>>,
                function => <<"main"/utf8>>,
                line => 7})
    end.
