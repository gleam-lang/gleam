---
source: compiler-core/src/erlang/tests/type_params.rs
expression: "\n        pub type Nested(a, b) {\n            VariantX(field_a: a, field_b: b)\n            VariantY(field_a: a, field_b: b)\n        }\n\n        pub type Parent(a, b) {\n            ParentX(Nested(a,b))\n            ParentY(Nested(a,b))\n        }\n\n        pub fn foo1() -> Parent(a, a) {\n            todo\n        }\n\n        pub fn foo2() -> Parent(a, b) {\n            todo\n        }\n\n        pub fn foo3(val_a: a) -> Parent(a, a) {\n            todo\n        }\n\n        pub fn foo4(val_a: a, val_b: b) -> Parent(a, b) {\n            todo\n        }\n        "
---
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([foo1/0, foo2/0, foo3/1, foo4/2]).
-export_type([nested/2, parent/2]).

-type nested(I, J) :: {variant_x, I, J} | {variant_y, I, J}.

-type parent(K, L) :: {parent_x, nested(K, L)} | {parent_y, nested(K, L)}.

-spec foo1() -> parent(any(), any()).
foo1() ->
    erlang:error(#{gleam_error => todo,
            message => <<"This has not yet been implemented"/utf8>>,
            module => <<"my/mod"/utf8>>,
            function => <<"foo1"/utf8>>,
            line => 13}).

-spec foo2() -> parent(any(), any()).
foo2() ->
    erlang:error(#{gleam_error => todo,
            message => <<"This has not yet been implemented"/utf8>>,
            module => <<"my/mod"/utf8>>,
            function => <<"foo2"/utf8>>,
            line => 17}).

-spec foo3(T) -> parent(T, T).
foo3(Val_a) ->
    erlang:error(#{gleam_error => todo,
            message => <<"This has not yet been implemented"/utf8>>,
            module => <<"my/mod"/utf8>>,
            function => <<"foo3"/utf8>>,
            line => 21}).

-spec foo4(W, X) -> parent(W, X).
foo4(Val_a, Val_b) ->
    erlang:error(#{gleam_error => todo,
            message => <<"This has not yet been implemented"/utf8>>,
            module => <<"my/mod"/utf8>>,
            function => <<"foo4"/utf8>>,
            line => 25}).
