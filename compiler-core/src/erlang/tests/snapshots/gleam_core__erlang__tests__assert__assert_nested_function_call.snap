---
source: compiler-core/src/erlang/tests/assert.rs
assertion_line: 92
expression: "\nfn and(x, y) {\n  x && y\n}\n\npub fn main() {\n  assert and(and(True, False), True)\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

fn and(x, y) {
  x && y
}

pub fn main() {
  assert and(and(True, False), True)
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).
-define(FILEPATH, "project/test/my/mod.gleam").
-export([main/0]).

-file("project/test/my/mod.gleam", 2).
-spec 'and'(boolean(), boolean()) -> boolean().
'and'(X, Y) ->
    X andalso Y.

-file("project/test/my/mod.gleam", 6).
-spec main() -> nil.
main() ->
    _assert_subject = 'and'(true, false),
    case 'and'(_assert_subject, true) of
        true -> nil;
        false -> erlang:error(#{gleam_error => assert,
                message => <<"Assertion failed."/utf8>>,
                file => <<?FILEPATH/utf8>>,
                module => <<"my/mod"/utf8>>,
                function => <<"main"/utf8>>,
                line => 7,
                kind => function_call,
                arguments => [#{kind => expression,
                        value => _assert_subject,
                        start => 57,
                        'end' => 73
                        }, #{kind => literal,
                        value => true,
                        start => 75,
                        'end' => 79
                        }],
                start => 46,
                'end' => 80,
                expression_start => 53})
    end.
