---
source: compiler-core/src/erlang/tests/guards.rs
expression: "\n        pub type Person {\n          Person(username: String, name: String, age: Int)\n        }\n        \n        pub fn main() {\n          let given_name = \"jack\"\n          let raiden = Person(\"raiden\", \"jack\", 31)\n        \n          case given_name {\n            name if name == raiden.name -> \"It's jack\"\n            _ -> \"It's not jack\"\n          }\n        }\n        "
---
----- SOURCE CODE

        pub type Person {
          Person(username: String, name: String, age: Int)
        }
        
        pub fn main() {
          let given_name = "jack"
          let raiden = Person("raiden", "jack", 31)
        
          case given_name {
            name if name == raiden.name -> "It's jack"
            _ -> "It's not jack"
          }
        }
        

----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([main/0]).
-export_type([person/0]).

-type person() :: {person, binary(), binary(), integer()}.

-file("/root/project/test/my/mod.gleam", 6).
-spec main() -> binary().
main() ->
    Given_name = <<"jack"/utf8>>,
    Raiden = {person, <<"raiden"/utf8>>, <<"jack"/utf8>>, 31},
    case Given_name of
        Name when Name =:= erlang:element(3, Raiden) ->
            <<"It's jack"/utf8>>;

        _ ->
            <<"It's not jack"/utf8>>
    end.
