---
source: compiler-core/src/erlang/tests/numbers.rs
expression: "\npub fn main() {\n  let assert 100_000 = 1\n  let assert 100_000.00101 = 1.\n  1\n}\n"
---
----- SOURCE CODE

pub fn main() {
  let assert 100_000 = 1
  let assert 100_000.00101 = 1.
  1
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch, inline]).
-define(FILEPATH, "project/test/my/mod.gleam").
-export([main/0]).

-file("project/test/my/mod.gleam", 2).
-spec main() -> integer().
main() ->
    case 1 of
        100000 -> nil;
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        file => <<?FILEPATH/utf8>>,
                        module => <<"my/mod"/utf8>>,
                        function => <<"main"/utf8>>,
                        line => 3,
                        value => _assert_fail,
                        start => 19,
                        'end' => 41,
                        pattern_start => 30,
                        pattern_end => 37})
    end,
    case 1.0 of
        100000.00101 -> nil;
        _assert_fail@1 ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        file => <<?FILEPATH/utf8>>,
                        module => <<"my/mod"/utf8>>,
                        function => <<"main"/utf8>>,
                        line => 4,
                        value => _assert_fail@1,
                        start => 44,
                        'end' => 73,
                        pattern_start => 55,
                        pattern_end => 68})
    end,
    1.
