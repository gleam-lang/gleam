---
source: compiler-core/src/erlang/tests/let_assert.rs
assertion_line: 62
expression: "\npub fn expect(value, message) {\n  let assert Ok(inner) = value as message\n  inner\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

pub fn expect(value, message) {
  let assert Ok(inner) = value as message
  inner
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).
-define(FILEPATH, "project/test/my/mod.gleam").
-export([expect/2]).

-file("project/test/my/mod.gleam", 2).
-spec expect({ok, L} | {error, any()}, binary()) -> L.
expect(Value, Message) ->
    Inner@1 = case Value of
        {ok, Inner} -> Inner;
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => Message,
                        file => <<?FILEPATH/utf8>>,
                        module => <<"my/mod"/utf8>>,
                        function => <<"expect"/utf8>>,
                        line => 3,
                        value => _assert_fail,
                        start => 35,
                        'end' => 45,
                        pattern_start => 46,
                        pattern_end => 55})
    end,
    Inner@1.
