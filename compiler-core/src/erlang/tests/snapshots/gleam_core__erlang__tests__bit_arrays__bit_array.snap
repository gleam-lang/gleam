---
source: compiler-core/src/erlang/tests/bit_arrays.rs
assertion_line: 5
expression: "pub fn main() {\n  let a = 1\n  let simple = <<1, a>>\n  let complex = <<4:int-big, 5.0:little-float, 6:native-int>>\n  let assert <<7:2, 8:size(3), b:bytes-size(4)>> = <<1>>\n  let assert <<c:8-unit(1), d:bytes-size(2)-unit(2)>> = <<1>>\n\n  simple\n}\n"
snapshot_kind: text
---
----- SOURCE CODE
pub fn main() {
  let a = 1
  let simple = <<1, a>>
  let complex = <<4:int-big, 5.0:little-float, 6:native-int>>
  let assert <<7:2, 8:size(3), b:bytes-size(4)>> = <<1>>
  let assert <<c:8-unit(1), d:bytes-size(2)-unit(2)>> = <<1>>

  simple
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).
-define(FILEPATH, "project/test/my/mod.gleam").
-export([main/0]).

-file("project/test/my/mod.gleam", 1).
-spec main() -> bitstring().
main() ->
    A = 1,
    Simple = <<1, A>>,
    Complex = <<4/integer-big, 5.0/little-float, 6/native-integer>>,
    B@1 = case <<1>> of
        <<7:2, 8:3, B:4/binary>> -> B;
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        value => _assert_fail,
                        start => 116,
                        pattern_start => 127,
                        pattern_end => 162,
                        module => <<"my/mod"/utf8>>,
                        function => <<"main"/utf8>>,
                        line => 5})
    end,
    {C@1, D@1} = case <<1>> of
        <<C:8/unit:1, D:2/binary-unit:2>> -> {C, D};
        _assert_fail@1 ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        value => _assert_fail@1,
                        start => 173,
                        pattern_start => 184,
                        pattern_end => 224,
                        module => <<"my/mod"/utf8>>,
                        function => <<"main"/utf8>>,
                        line => 6})
    end,
    Simple.
