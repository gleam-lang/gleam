---
source: compiler-core/src/erlang/tests/records.rs
expression: "\npub type Person { Person(name: String, age: Int) }\n\nfn main() {\n    let new_p = Person(..return_person(), age: 28)\n    new_p\n}\n\nfn return_person() {\n    Person(\"Quinn\", 27)\n}\n"
---
----- SOURCE CODE

pub type Person { Person(name: String, age: Int) }

fn main() {
    let new_p = Person(..return_person(), age: 28)
    new_p
}

fn return_person() {
    Person("Quinn", 27)
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export_type([person/0]).

-type person() :: {person, binary(), integer()}.

-file("/root/project/test/my/mod.gleam", 9).
-spec return_person() -> person().
return_person() ->
    {person, <<"Quinn"/utf8>>, 27}.

-file("/root/project/test/my/mod.gleam", 4).
-spec main() -> person().
main() ->
    New_p = erlang:setelement(3, return_person(), 28),
    New_p.
