---
source: compiler-core/src/erlang/tests/strings.rs
expression: "\npub fn go(x) {\n  let _ = case x {\n    \"\\f\" <> rest -> \"test\"\n    \"\\n\" <> rest -> \"test\"\n    \"\\r\" <> rest -> \"test\"\n    \"\\t\" <> rest -> \"test\"\n    \"\\\"\" <> rest -> \"test\"\n    \"\\\\\" <> rest -> \"test\"\n    \"\\f \\n \\r \\t \\\" \\\\\" <> rest -> \"control chars with prefix assignment\"\n    \"\\u{9}\" <> rest -> \"test\"\n    \"\\u{000009}\" <> rest -> \"test\"\n    \"\\u{21}\" <> rest -> \"test\"\n    \"\\u{100}\" <> rest -> \"test\"\n    \"\\u{1000}\" <> rest -> \"test\"\n    \"\\u{1F600}\" <> rest -> \"test\"\n    \"\\u{1f600}\" <> rest -> \"test\"\n    \"\\u{01F600}\" <> rest -> \"test\"\n    \"\\u{01f600}\" <> rest -> \"test\"\n    \"\\u{9} \\u{000009} \\u{21} \\u{100} \\u{1000} \\u{1F600} \\u{01F600}\" <> rest -> \"test\"\n    _ -> \"Unknown\"\n  }\n}\n"
---
----- SOURCE CODE

pub fn go(x) {
  let _ = case x {
    "\f" <> rest -> "test"
    "\n" <> rest -> "test"
    "\r" <> rest -> "test"
    "\t" <> rest -> "test"
    "\"" <> rest -> "test"
    "\\" <> rest -> "test"
    "\f \n \r \t \" \\" <> rest -> "control chars with prefix assignment"
    "\u{9}" <> rest -> "test"
    "\u{000009}" <> rest -> "test"
    "\u{21}" <> rest -> "test"
    "\u{100}" <> rest -> "test"
    "\u{1000}" <> rest -> "test"
    "\u{1F600}" <> rest -> "test"
    "\u{1f600}" <> rest -> "test"
    "\u{01F600}" <> rest -> "test"
    "\u{01f600}" <> rest -> "test"
    "\u{9} \u{000009} \u{21} \u{100} \u{1000} \u{1F600} \u{01F600}" <> rest -> "test"
    _ -> "Unknown"
  }
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([go/1]).

-file("/root/project/test/my/mod.gleam", 2).
-spec go(binary()) -> binary().
go(X) ->
    _ = case X of
        <<"\f"/utf8, Rest/binary>> ->
            <<"test"/utf8>>;

        <<"\n"/utf8, Rest@1/binary>> ->
            <<"test"/utf8>>;

        <<"\r"/utf8, Rest@2/binary>> ->
            <<"test"/utf8>>;

        <<"\t"/utf8, Rest@3/binary>> ->
            <<"test"/utf8>>;

        <<"\""/utf8, Rest@4/binary>> ->
            <<"test"/utf8>>;

        <<"\\"/utf8, Rest@5/binary>> ->
            <<"test"/utf8>>;

        <<"\f \n \r \t \" \\"/utf8, Rest@6/binary>> ->
            <<"control chars with prefix assignment"/utf8>>;

        <<"\x{9}"/utf8, Rest@7/binary>> ->
            <<"test"/utf8>>;

        <<"\x{000009}"/utf8, Rest@8/binary>> ->
            <<"test"/utf8>>;

        <<"\x{21}"/utf8, Rest@9/binary>> ->
            <<"test"/utf8>>;

        <<"\x{100}"/utf8, Rest@10/binary>> ->
            <<"test"/utf8>>;

        <<"\x{1000}"/utf8, Rest@11/binary>> ->
            <<"test"/utf8>>;

        <<"\x{1F600}"/utf8, Rest@12/binary>> ->
            <<"test"/utf8>>;

        <<"\x{1f600}"/utf8, Rest@13/binary>> ->
            <<"test"/utf8>>;

        <<"\x{01F600}"/utf8, Rest@14/binary>> ->
            <<"test"/utf8>>;

        <<"\x{01f600}"/utf8, Rest@15/binary>> ->
            <<"test"/utf8>>;

        <<"\x{9} \x{000009} \x{21} \x{100} \x{1000} \x{1F600} \x{01F600}"/utf8, Rest@16/binary>> ->
            <<"test"/utf8>>;

        _ ->
            <<"Unknown"/utf8>>
    end.
