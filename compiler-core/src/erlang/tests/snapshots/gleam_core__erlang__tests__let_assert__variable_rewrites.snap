---
source: compiler-core/src/erlang/tests/let_assert.rs
assertion_line: 39
expression: "pub fn go() {\n  let assert Ok(y) = Ok(1)\n  let assert Ok(y) = Ok(1)\n  y\n}"
snapshot_kind: text
---
----- SOURCE CODE
pub fn go() {
  let assert Ok(y) = Ok(1)
  let assert Ok(y) = Ok(1)
  y
}

----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).
-define(FILEPATH, "project/test/my/mod.gleam").
-export([go/0]).

-file("project/test/my/mod.gleam", 1).
-spec go() -> integer().
go() ->
    Y@1 = case {ok, 1} of
        {ok, Y} -> Y;
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        file => ?FILEPATH,
                        module => <<"my/mod"/utf8>>,
                        function => <<"go"/utf8>>,
                        line => 2,
                        value => _assert_fail,
                        start => 16,
                        pattern_start => 27,
                        pattern_end => 32})
    end,
    Y@3 = case {ok, 1} of
        {ok, Y@2} -> Y@2;
        _assert_fail@1 ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        file => ?FILEPATH,
                        module => <<"my/mod"/utf8>>,
                        function => <<"go"/utf8>>,
                        line => 3,
                        value => _assert_fail@1,
                        start => 43,
                        pattern_start => 54,
                        pattern_end => 59})
    end,
    Y@3.
