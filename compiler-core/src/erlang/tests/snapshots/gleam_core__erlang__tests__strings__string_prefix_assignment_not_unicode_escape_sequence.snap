---
source: compiler-core/src/erlang/tests/strings.rs
expression: "\npub fn go(x) {\n  let _ = case x {\n    \"\\\\u{9}\" as start <> rest -> \"test\"\n    \"\\\\u{000009}\" as start <> rest -> \"test\"\n    \"\\\\u{21}\" as start <> rest -> \"test\"\n    \"\\\\u{100}\" as start <> rest -> \"test\"\n    \"\\\\u{1000}\" as start <> rest -> \"test\"\n    \"\\\\u{1F600}\" as start <> rest -> \"test\"\n    \"\\\\u{1f600}\" as start <> rest -> \"test\"\n    \"\\\\u{01F600}\" as start <> rest -> \"test\"\n    \"\\\\u{01f600}\" as start <> rest -> \"test\"\n    \"\\\\u{9} \\\\u{000009} \\\\u{21} \\\\u{100} \\\\u{1000} \\\\u{1F600} \\\\u{01F600}\" as start <> rest -> \"test\"\n    _ -> \"Unknown\"\n  }\n}\n"
---
----- SOURCE CODE

pub fn go(x) {
  let _ = case x {
    "\\u{9}" as start <> rest -> "test"
    "\\u{000009}" as start <> rest -> "test"
    "\\u{21}" as start <> rest -> "test"
    "\\u{100}" as start <> rest -> "test"
    "\\u{1000}" as start <> rest -> "test"
    "\\u{1F600}" as start <> rest -> "test"
    "\\u{1f600}" as start <> rest -> "test"
    "\\u{01F600}" as start <> rest -> "test"
    "\\u{01f600}" as start <> rest -> "test"
    "\\u{9} \\u{000009} \\u{21} \\u{100} \\u{1000} \\u{1F600} \\u{01F600}" as start <> rest -> "test"
    _ -> "Unknown"
  }
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([go/1]).

-file("/root/project/test/my/mod.gleam", 2).
-spec go(binary()) -> binary().
go(X) ->
    _ = case X of
        <<Start:5/binary, Rest/binary>> when Start =:= <<"\\u{9}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@1:10/binary, Rest@1/binary>> when Start@1 =:= <<"\\u{000009}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@2:6/binary, Rest@2/binary>> when Start@2 =:= <<"\\u{21}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@3:7/binary, Rest@3/binary>> when Start@3 =:= <<"\\u{100}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@4:8/binary, Rest@4/binary>> when Start@4 =:= <<"\\u{1000}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@5:9/binary, Rest@5/binary>> when Start@5 =:= <<"\\u{1F600}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@6:9/binary, Rest@6/binary>> when Start@6 =:= <<"\\u{1f600}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@7:10/binary, Rest@7/binary>> when Start@7 =:= <<"\\u{01F600}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@8:10/binary, Rest@8/binary>> when Start@8 =:= <<"\\u{01f600}"/utf8>> ->
            <<"test"/utf8>>;

        <<Start@9:61/binary, Rest@9/binary>> when Start@9 =:= <<"\\u{9} \\u{000009} \\u{21} \\u{100} \\u{1000} \\u{1F600} \\u{01F600}"/utf8>> ->
            <<"test"/utf8>>;

        _ ->
            <<"Unknown"/utf8>>
    end.
