---
source: compiler-core/src/erlang/tests/let_assert.rs
assertion_line: 50
expression: "\npub fn unwrap_or_panic(value) {\n  let assert Ok(inner) = value as \"Oops, there was an error\"\n  inner\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

pub fn unwrap_or_panic(value) {
  let assert Ok(inner) = value as "Oops, there was an error"
  inner
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([unwrap_or_panic/1]).

-file("project/test/my/mod.gleam", 2).
-spec unwrap_or_panic({ok, K} | {error, any()}) -> K.
unwrap_or_panic(Value) ->
    Inner@1 = case Value of
        {ok, Inner} -> Inner;
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Oops, there was an error"/utf8>>,
                        value => _assert_fail,
                        start => 39,
                        pattern_start => 46,
                        pattern_end => 55,
                        module => <<"my/mod"/utf8>>,
                        function => <<"unwrap_or_panic"/utf8>>,
                        line => 3})
    end,
    Inner@1.
