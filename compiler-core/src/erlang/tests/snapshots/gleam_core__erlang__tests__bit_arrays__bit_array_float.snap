---
source: compiler-core/src/erlang/tests/bit_arrays.rs
expression: "pub fn main() {\n  let b = 16\n  let floats = <<1.0:16-float, 5.0:float-32, 6.0:float-64-little, 1.0:float-size(b)>>\n  let assert <<1.0:16-float, 5.0:float-32, 6.0:float-64-little, 1.0:float-size(b)>> = floats\n}"
---
----- SOURCE CODE
pub fn main() {
  let b = 16
  let floats = <<1.0:16-float, 5.0:float-32, 6.0:float-64-little, 1.0:float-size(b)>>
  let assert <<1.0:16-float, 5.0:float-32, 6.0:float-64-little, 1.0:float-size(b)>> = floats
}

----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([main/0]).

-file("/root/project/test/my/mod.gleam", 1).
-spec main() -> bitstring().
main() ->
    B = 16,
    Floats = <<1.0:16/float,
        5.0:32/float,
        6.0:64/float-little,
        1.0:(lists:max([(B), 0]))/float>>,
    <<1.0:16/float, 5.0:32/float, 6.0:64/float-little, 1.0:B/float>> = case Floats of
        <<1.0:16/float, 5.0:32/float, 6.0:64/float-little, 1.0:B/float>> -> Floats;
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        value => _assert_fail,
                        module => <<"my/mod"/utf8>>,
                        function => <<"main"/utf8>>,
                        line => 4})
    end.
