---
source: compiler-core/src/erlang/tests/records.rs
expression: "\npub type Car { Car(make: String, model: String, driver: Person) }\npub type Person { Person(name: String, age: Int) }\n\nfn main() {\n    let car = Car(make: \"Amphicar\", model: \"Model 770\", driver: Person(name: \"John Doe\", age: 27))\n    let new_p = Person(..car.driver, age: 28)\n    new_p\n}\n"
---
----- SOURCE CODE

pub type Car { Car(make: String, model: String, driver: Person) }
pub type Person { Person(name: String, age: Int) }

fn main() {
    let car = Car(make: "Amphicar", model: "Model 770", driver: Person(name: "John Doe", age: 27))
    let new_p = Person(..car.driver, age: 28)
    new_p
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export_type([car/0, person/0]).

-type car() :: {car, binary(), binary(), person()}.

-type person() :: {person, binary(), integer()}.

-file("/root/project/test/my/mod.gleam", 5).
-spec main() -> person().
main() ->
    Car = {car,
        <<"Amphicar"/utf8>>,
        <<"Model 770"/utf8>>,
        {person, <<"John Doe"/utf8>>, 27}},
    New_p = begin
        _record = erlang:element(4, Car),
        {person, erlang:element(2, _record), 28}
    end,
    New_p.
