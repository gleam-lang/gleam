---
source: compiler-core/src/erlang/tests/let_assert.rs
expression: "\npub fn main() {\n  let assert <<\"Hello\" as m:utf16-little>> = <<\"Hello\":utf16-little>>\n  m\n}\n"
---
----- SOURCE CODE

pub fn main() {
  let assert <<"Hello" as m:utf16-little>> = <<"Hello":utf16-little>>
  m
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([main/0]).

-file("project/test/my/mod.gleam", 2).
-spec main() -> binary().
main() ->
    M@1 = case <<"Hello"/utf16-little>> of
        <<M:10/binary-little>> when M =:= <<"Hello"/utf16-little>> -> <<"Hello"/utf8>>;
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        value => _assert_fail,
                        module => <<"my/mod"/utf8>>,
                        function => <<"main"/utf8>>,
                        line => 3})
    end,
    M@1.
