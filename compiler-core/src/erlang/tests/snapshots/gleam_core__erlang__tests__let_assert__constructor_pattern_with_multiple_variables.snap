---
source: compiler-core/src/erlang/tests/let_assert.rs
assertion_line: 170
expression: "\npub type Wibble {\n  Wibble(Int, Float)\n}\n\npub fn go() {\n  let assert Wibble(x, 2.0 as y) = Wibble(1, 2.0)\n  x\n}"
snapshot_kind: text
---
----- SOURCE CODE

pub type Wibble {
  Wibble(Int, Float)
}

pub fn go() {
  let assert Wibble(x, 2.0 as y) = Wibble(1, 2.0)
  x
}

----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).
-define(FILEPATH, "project/test/my/mod.gleam").
-export([go/0]).
-export_type([wibble/0]).

-type wibble() :: {wibble, integer(), float()}.

-file("project/test/my/mod.gleam", 6).
-spec go() -> integer().
go() ->
    {X@1, Y@1} = case {wibble, 1, 2.0} of
        {wibble, X, 2.0 = Y} -> {X, Y};
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        file => <<?FILEPATH/utf8>>,
                        module => <<"my/mod"/utf8>>,
                        function => <<"go"/utf8>>,
                        line => 7,
                        value => _assert_fail,
                        start => 59,
                        pattern_start => 70,
                        pattern_end => 89})
    end,
    X@1.
