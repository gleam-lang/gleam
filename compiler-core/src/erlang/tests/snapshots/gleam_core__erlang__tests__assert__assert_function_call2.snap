---
source: compiler-core/src/erlang/tests/assert.rs
assertion_line: 77
expression: "\nfn and(a, b) {\n  a && b\n}\n\npub fn go(x) {\n  assert and(True, x)\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

fn and(a, b) {
  a && b
}

pub fn go(x) {
  assert and(True, x)
}


----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).
-define(FILEPATH, "project/test/my/mod.gleam").
-export([go/1]).

-file("project/test/my/mod.gleam", 2).
-spec 'and'(boolean(), boolean()) -> boolean().
'and'(A, B) ->
    A andalso B.

-file("project/test/my/mod.gleam", 6).
-spec go(boolean()) -> nil.
go(X) ->
    case 'and'(true, X) of
        true -> nil;
        false -> erlang:error(#{gleam_error => assert,
                message => <<"Assertion failed."/utf8>>,
                kind => function_call,
                arguments => [#{kind => literal,
                        value => true,
                        start => 56,
                        'end' => 60
                        }, #{kind => expression,
                        value => X,
                        start => 62,
                        'end' => 63
                        }],
                start => 45,
                expression_start => 52,
                expression_end => 64,
                module => <<"my/mod"/utf8>>,
                function => <<"go"/utf8>>,
                line => 7})
    end.
