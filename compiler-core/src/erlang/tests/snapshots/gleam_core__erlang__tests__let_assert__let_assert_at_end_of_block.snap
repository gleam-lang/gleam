---
source: compiler-core/src/erlang/tests/let_assert.rs
expression: "\npub fn go() {\n  let result = Ok(10)\n  let x = {\n    let assert Ok(_) = result\n  }\n  x\n}"
---
----- SOURCE CODE

pub fn go() {
  let result = Ok(10)
  let x = {
    let assert Ok(_) = result
  }
  x
}

----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch, inline]).
-define(FILEPATH, "project/test/my/mod.gleam").
-export([go/0]).

-file("project/test/my/mod.gleam", 2).
-spec go() -> {ok, integer()} | {error, any()}.
go() ->
    Result = {ok, 10},
    X = begin
        case Result of
            {ok, _} -> Result;
            _assert_fail ->
                erlang:error(#{gleam_error => let_assert,
                            message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                            file => <<?FILEPATH/utf8>>,
                            module => <<"my/mod"/utf8>>,
                            function => <<"go"/utf8>>,
                            line => 5,
                            value => _assert_fail,
                            start => 53,
                            'end' => 78,
                            pattern_start => 64,
                            pattern_end => 69})
        end
    end,
    X.
