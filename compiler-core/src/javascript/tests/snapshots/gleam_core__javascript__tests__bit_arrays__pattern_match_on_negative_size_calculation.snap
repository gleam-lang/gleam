---
source: compiler-core/src/javascript/tests/bit_arrays.rs
expression: "\npub fn main() {\n  let assert <<a, b:size(a - 100000), c:size(b)>> = <<1, 2, 3, 4, 5>>\n}\n"
---
----- SOURCE CODE

pub fn main() {
  let assert <<a, b:size(a - 100000), c:size(b)>> = <<1, 2, 3, 4, 5>>
}


----- COMPILED JAVASCRIPT
import { makeError, toBitArray, bitArraySliceToInt } from "../gleam.mjs";

const FILEPATH = "src/module.gleam";

export function main() {
  let $ = toBitArray([1, 2, 3, 4, 5]);
  let a$1;
  let b$1;
  let c;
  if ($.bitSize >= 8) {
    let a = $.byteAt(0);
    if (a - 100000 >= 0) {
      let b = bitArraySliceToInt($, 8, 8 + a - 100000, true, false);
      if ($.bitSize === 8 + b + a - 100000) {
        a$1 = a;
        b$1 = b;
        c = bitArraySliceToInt($, 8 + a - 100000, 8 + a - 100000 + b$1, true, false);
      } else {
        throw makeError(
          "let_assert",
          FILEPATH,
          "my/mod",
          3,
          "main",
          "Pattern match failed, no pattern matched the value.",
          { value: $, start: 19, end: 86, pattern_start: 30, pattern_end: 66 }
        )
      }
    } else {
      throw makeError(
        "let_assert",
        FILEPATH,
        "my/mod",
        3,
        "main",
        "Pattern match failed, no pattern matched the value.",
        { value: $, start: 19, end: 86, pattern_start: 30, pattern_end: 66 }
      )
    }
  } else {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      3,
      "main",
      "Pattern match failed, no pattern matched the value.",
      { value: $, start: 19, end: 86, pattern_start: 30, pattern_end: 66 }
    )
  }
  return $;
}
