---
source: compiler-core/src/javascript/tests/custom_types.rs
expression: "\ntype Cat {\n  Cat(name: String, cuteness: Int)\n}\n\ntype Box {\n  Box(occupant: Cat)\n}\n\nconst felix = Cat(\"Felix\", 12)\nconst tom = Cat(cuteness: 1, name: \"Tom\")\n\nfn go() {\n  Cat(\"Nubi\", 1)\n  Cat(2, name: \"Nubi\")\n  Cat(cuteness: 3, name: \"Nubi\")\n}\n\nfn update(cat) {\n  Cat(..cat, name: \"Sid\")\n  Cat(..cat, name: \"Bartholemew Wonder Puss the Fourth !!!!!!!!!!!!!!!!\")\n  Cat(..new_cat(), name: \"Molly\")\n  let box = Box(occupant: cat)\n  Cat(..box.occupant, cuteness: box.occupant.cuteness + 1)\n}\n\nfn access(cat: Cat) {\n  cat.cuteness\n}\n\nfn new_cat() {\n  Cat(name: \"Beau\", cuteness: 11)\n}\n"
---
----- SOURCE CODE

type Cat {
  Cat(name: String, cuteness: Int)
}

type Box {
  Box(occupant: Cat)
}

const felix = Cat("Felix", 12)
const tom = Cat(cuteness: 1, name: "Tom")

fn go() {
  Cat("Nubi", 1)
  Cat(2, name: "Nubi")
  Cat(cuteness: 3, name: "Nubi")
}

fn update(cat) {
  Cat(..cat, name: "Sid")
  Cat(..cat, name: "Bartholemew Wonder Puss the Fourth !!!!!!!!!!!!!!!!")
  Cat(..new_cat(), name: "Molly")
  let box = Box(occupant: cat)
  Cat(..box.occupant, cuteness: box.occupant.cuteness + 1)
}

fn access(cat: Cat) {
  cat.cuteness
}

fn new_cat() {
  Cat(name: "Beau", cuteness: 11)
}


----- COMPILED JAVASCRIPT
import { CustomType as $CustomType } from "../gleam.mjs";

class Cat extends $CustomType {
  constructor(name, cuteness) {
    super();
    this.name = name;
    this.cuteness = cuteness;
  }
}

class Box extends $CustomType {
  constructor(occupant) {
    super();
    this.occupant = occupant;
  }
}

function go() {
  new Cat("Nubi", 1);
  new Cat("Nubi", 2);
  return new Cat("Nubi", 3);
}

function access(cat) {
  return cat.cuteness;
}

function new_cat() {
  return new Cat("Beau", 11);
}

function update(cat) {
  cat.withFields({ name: "Sid" });
  cat.withFields({ name: "Bartholemew Wonder Puss the Fourth !!!!!!!!!!!!!!!!" });
  new_cat().withFields({ name: "Molly" });
  let box = new Box(cat);
  return box.occupant.withFields({ cuteness: box.occupant.cuteness + 1 });
}

const felix = /* @__PURE__ */ new Cat("Felix", 12);

const tom = /* @__PURE__ */ new Cat("Tom", 1);
