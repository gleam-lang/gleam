---
source: compiler-core/src/javascript/tests/case.rs
expression: "\ntype Wibble {\n  Wibble(Wobble)\n}            \ntype Wobble {\n  Wobble(wabble: Wabble)\n}\ntype Wabble {\n  Wabble(tuple: #(Int, String))\n}\n\npub fn main() {\n  let tmp = Wibble(Wobble(Wabble(#(42, \"wibble\"))))\n  case tmp {\n    Wibble(Wobble(Wabble(#(_int, \"w\" as wibble <> rest)))) -> wibble <> rest\n    _ -> panic\n  }\n}\n"
---
----- SOURCE CODE

type Wibble {
  Wibble(Wobble)
}            
type Wobble {
  Wobble(wabble: Wabble)
}
type Wabble {
  Wabble(tuple: #(Int, String))
}

pub fn main() {
  let tmp = Wibble(Wobble(Wabble(#(42, "wibble"))))
  case tmp {
    Wibble(Wobble(Wabble(#(_int, "w" as wibble <> rest)))) -> wibble <> rest
    _ -> panic
  }
}


----- COMPILED JAVASCRIPT
import { CustomType as $CustomType, makeError } from "../gleam.mjs";

class Wibble extends $CustomType {
  constructor(x0) {
    super();
    this[0] = x0;
  }
}

class Wobble extends $CustomType {
  constructor(wabble) {
    super();
    this.wabble = wabble;
  }
}

class Wabble extends $CustomType {
  constructor(tuple) {
    super();
    this.tuple = tuple;
  }
}

export function main() {
  let tmp = new Wibble(new Wobble(new Wabble([42, "wibble"])));
  if (tmp instanceof Wibble &&
  tmp[0] instanceof Wobble &&
  tmp[0].wabble instanceof Wabble &&
  tmp[0].wabble.tuple[1].startsWith("w")) {
    let rest = tmp[0].wabble.tuple[1].slice(1);
    let wibble = "w";
    return wibble + rest;
  } else {
    throw makeError(
      "panic",
      "my/mod",
      16,
      "main",
      "`panic` expression evaluated.",
      {}
    )
  }
}
