---
source: compiler-core/src/javascript/tests/custom_types.rs
expression: "\npub type TypeWithALongNameAndSeveralArguments{\n  TypeWithALongNameAndSeveralArguments(String, String, String, a: String, b: String)\n}\n\npub const local = TypeWithALongNameAndSeveralArguments(\"one\", \"two\", \"three\", \"four\", \"five\")\n"
---
----- SOURCE CODE

pub type TypeWithALongNameAndSeveralArguments{
  TypeWithALongNameAndSeveralArguments(String, String, String, a: String, b: String)
}

pub const local = TypeWithALongNameAndSeveralArguments("one", "two", "three", "four", "five")


----- TYPESCRIPT DEFINITIONS
import type * as _ from "../gleam.d.mts";

export class TypeWithALongNameAndSeveralArguments extends _.CustomType {
  constructor(
    argument$0: string,
    argument$1: string,
    argument$2: string,
    a: string,
    b: string
  );
  
  0: string;
  1: string;
  2: string;
  a: string;
  b: string;
}
export function TypeWithALongNameAndSeveralArguments$TypeWithALongNameAndSeveralArguments(
  $0: string,
  $1: string,
  $2: string,
  a: string,
  b: string,
): TypeWithALongNameAndSeveralArguments$;
export function TypeWithALongNameAndSeveralArguments$isTypeWithALongNameAndSeveralArguments(
  value: TypeWithALongNameAndSeveralArguments$,
): boolean;
export function TypeWithALongNameAndSeveralArguments$TypeWithALongNameAndSeveralArguments$0(value: TypeWithALongNameAndSeveralArguments$): string;
export function TypeWithALongNameAndSeveralArguments$TypeWithALongNameAndSeveralArguments$1(
  value: TypeWithALongNameAndSeveralArguments$,
): string;
export function TypeWithALongNameAndSeveralArguments$TypeWithALongNameAndSeveralArguments$2(value: TypeWithALongNameAndSeveralArguments$): string;
export function TypeWithALongNameAndSeveralArguments$TypeWithALongNameAndSeveralArguments$3(
  value: TypeWithALongNameAndSeveralArguments$,
): string;
export function TypeWithALongNameAndSeveralArguments$TypeWithALongNameAndSeveralArguments$a(value: TypeWithALongNameAndSeveralArguments$): string;
export function TypeWithALongNameAndSeveralArguments$TypeWithALongNameAndSeveralArguments$4(
  value: TypeWithALongNameAndSeveralArguments$,
): string;
export function TypeWithALongNameAndSeveralArguments$TypeWithALongNameAndSeveralArguments$b(value: TypeWithALongNameAndSeveralArguments$): string;

export type TypeWithALongNameAndSeveralArguments$ = TypeWithALongNameAndSeveralArguments;

export const local: TypeWithALongNameAndSeveralArguments$;
