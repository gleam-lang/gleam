---
source: compiler-core/src/javascript/tests/case.rs
assertion_line: 380
expression: "\npub type Wibble {\n  Wibble(wibble: Int, wobble: Int)\n}\n\nfn identity(x) {\n  x\n}\n\npub fn go(x) {\n  case x {\n    Wibble(1, _) -> Wibble(..x, wibble: 4) |> identity\n    Wibble(_, 3) -> Wibble(..x, wobble: 10) |> identity\n    _ -> panic\n  }\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

pub type Wibble {
  Wibble(wibble: Int, wobble: Int)
}

fn identity(x) {
  x
}

pub fn go(x) {
  case x {
    Wibble(1, _) -> Wibble(..x, wibble: 4) |> identity
    Wibble(_, 3) -> Wibble(..x, wobble: 10) |> identity
    _ -> panic
  }
}


----- COMPILED JAVASCRIPT
import { CustomType as $CustomType, makeError } from "../gleam.mjs";

const FILEPATH = "src/module.gleam";

export class Wibble extends $CustomType {
  constructor(wibble, wobble) {
    super();
    this.wibble = wibble;
    this.wobble = wobble;
  }
}

function identity(x) {
  return x;
}

export function go(x) {
  let $ = x.wibble;
  if ($ === 1) {
    let _block;
    _block = new Wibble(4, x.wobble);
    let _pipe = _block;
    return identity(_pipe);
  } else {
    let $1 = x.wobble;
    if ($1 === 3) {
      let _block;
      _block = new Wibble(x.wibble, 10);
      let _pipe = _block;
      return identity(_pipe);
    } else {
      throw makeError(
        "panic",
        FILEPATH,
        "my/mod",
        14,
        "go",
        "`panic` expression evaluated.",
        {}
      )
    }
  }
}
