---
source: compiler-core/src/javascript/tests/assignments.rs
expression: "\ntype Wibble {\n    Wibble(Int)\n    Wobble(Int)\n    Woo(Int)\n}\n\nfn go() {\n  let assert Wobble(n) = todo\n  n\n}\n"
---
----- SOURCE CODE

type Wibble {
    Wibble(Int)
    Wobble(Int)
    Woo(Int)
}

fn go() {
  let assert Wobble(n) = todo
  n
}


----- COMPILED JAVASCRIPT
import { CustomType as $CustomType, makeError } from "../gleam.mjs";

class Wibble extends $CustomType {
  constructor(x0) {
    super();
    this[0] = x0;
  }
}

class Wobble extends $CustomType {
  constructor(x0) {
    super();
    this[0] = x0;
  }
}

class Woo extends $CustomType {
  constructor(x0) {
    super();
    this[0] = x0;
  }
}

function go() {
  let _block;
  throw makeError(
    "todo",
    "my/mod",
    9,
    "go",
    "`todo` expression evaluated. This code has not yet been implemented.",
    {}
  )
  let $ = _block;
  if (!($ instanceof Wobble)) {
    throw makeError(
      "let_assert",
      "my/mod",
      9,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: $ }
    )
  }
  let n = $[0];
  return n;
}
