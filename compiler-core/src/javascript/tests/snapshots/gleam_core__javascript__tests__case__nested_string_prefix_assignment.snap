---
source: compiler-core/src/javascript/tests/case.rs
assertion_line: 335
expression: "\ntype Wibble {\n  Wibble(wobble: String)\n}\n\npub fn main() {\n  let tmp = Wibble(wobble: \"wibble\")\n  case tmp {\n    Wibble(wobble: \"w\" as wibble <> rest) -> wibble <> rest\n    _ -> panic\n  }\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

type Wibble {
  Wibble(wobble: String)
}

pub fn main() {
  let tmp = Wibble(wobble: "wibble")
  case tmp {
    Wibble(wobble: "w" as wibble <> rest) -> wibble <> rest
    _ -> panic
  }
}


----- COMPILED JAVASCRIPT
import { CustomType as $CustomType, makeError } from "../gleam.mjs";

const FILEPATH = "src/module.gleam";

class Wibble extends $CustomType {
  constructor(wobble) {
    super();
    this.wobble = wobble;
  }
}

export function main() {
  let tmp = new Wibble("wibble");
  let $ = tmp.wobble;
  if ($.startsWith("w")) {
    let wibble = "w";
    let rest = $.slice(1);
    return wibble + rest;
  } else {
    throw makeError(
      "panic",
      FILEPATH,
      "my/mod",
      10,
      "main",
      "`panic` expression evaluated.",
      {}
    )
  }
}
