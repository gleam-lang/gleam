---
source: compiler-core/src/javascript/tests/lists.rs
expression: "\nfn go(x, y) {\n  let assert [] = x\n  let assert [a] = x\n  let assert [1, 2] = x\n  let assert [_, #(3, b)] = y\n  let assert [head, ..tail] = y\n}\n"
---
----- SOURCE CODE

fn go(x, y) {
  let assert [] = x
  let assert [a] = x
  let assert [1, 2] = x
  let assert [_, #(3, b)] = y
  let assert [head, ..tail] = y
}


----- COMPILED JAVASCRIPT
import { Empty as $Empty, NonEmpty as $NonEmpty, makeError } from "../gleam.mjs";

function go(x, y) {
  if (x instanceof $NonEmpty) {
    throw makeError(
      "let_assert",
      "my/mod",
      3,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: x }
    )
  }
  if (x instanceof $Empty || x.tail instanceof $NonEmpty) {
    throw makeError(
      "let_assert",
      "my/mod",
      4,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: x }
    )
  }
  let a = x.head;
  if (
    x instanceof $Empty ||
    x.tail instanceof $Empty ||
    x.tail.tail instanceof $NonEmpty ||
    x.tail.head !== 2 ||
    x.head !== 1
  ) {
    throw makeError(
      "let_assert",
      "my/mod",
      5,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: x }
    )
  }
  if (
    y instanceof $Empty ||
    y.tail instanceof $Empty ||
    y.tail.tail instanceof $NonEmpty ||
    y.tail.head[0] !== 3
  ) {
    throw makeError(
      "let_assert",
      "my/mod",
      6,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: y }
    )
  }
  let b = y.tail.head[1];
  if (y instanceof $Empty) {
    throw makeError(
      "let_assert",
      "my/mod",
      7,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: y }
    )
  }
  let head = y.head;
  let tail = y.tail;
  return y;
}
