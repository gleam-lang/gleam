---
source: compiler-core/src/javascript/tests/lists.rs
expression: "\npub fn go(x, y) {\n  let assert [] = x\n  let assert [a] = x\n  let assert [1, 2] = x\n  let assert [_, #(3, b)] = y\n  let assert [head, ..tail] = y\n}\n"
---
----- SOURCE CODE

pub fn go(x, y) {
  let assert [] = x
  let assert [a] = x
  let assert [1, 2] = x
  let assert [_, #(3, b)] = y
  let assert [head, ..tail] = y
}


----- COMPILED JAVASCRIPT
import { Empty as $Empty, makeError } from "../gleam.mjs";

const FILEPATH = "src/module.gleam";

export function go(x, y) {
  if (x instanceof $Empty) {
    
  } else {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      3,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: x, start: 21, end: 38, pattern_start: 32, pattern_end: 34 }
    )
  }
  let a;
  if (x instanceof $Empty) {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      4,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: x, start: 41, end: 59, pattern_start: 52, pattern_end: 55 }
    )
  } else {
    let $ = x.tail;
    if ($ instanceof $Empty) {
      a = x.head;
    } else {
      throw makeError(
        "let_assert",
        FILEPATH,
        "my/mod",
        4,
        "go",
        "Pattern match failed, no pattern matched the value.",
        { value: x, start: 41, end: 59, pattern_start: 52, pattern_end: 55 }
      )
    }
  }
  if (x instanceof $Empty) {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      5,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: x, start: 62, end: 83, pattern_start: 73, pattern_end: 79 }
    )
  } else {
    let $ = x.tail;
    if ($ instanceof $Empty) {
      throw makeError(
        "let_assert",
        FILEPATH,
        "my/mod",
        5,
        "go",
        "Pattern match failed, no pattern matched the value.",
        { value: x, start: 62, end: 83, pattern_start: 73, pattern_end: 79 }
      )
    } else {
      let $1 = $.tail;
      if ($1 instanceof $Empty) {
        let $2 = $.head;
        if ($2 === 2) {
          let $3 = x.head;
          if ($3 === 1) {
            
          } else {
            throw makeError(
              "let_assert",
              FILEPATH,
              "my/mod",
              5,
              "go",
              "Pattern match failed, no pattern matched the value.",
              {
                value: x,
                start: 62,
                end: 83,
                pattern_start: 73,
                pattern_end: 79
              }
            )
          }
        } else {
          throw makeError(
            "let_assert",
            FILEPATH,
            "my/mod",
            5,
            "go",
            "Pattern match failed, no pattern matched the value.",
            { value: x, start: 62, end: 83, pattern_start: 73, pattern_end: 79 }
          )
        }
      } else {
        throw makeError(
          "let_assert",
          FILEPATH,
          "my/mod",
          5,
          "go",
          "Pattern match failed, no pattern matched the value.",
          { value: x, start: 62, end: 83, pattern_start: 73, pattern_end: 79 }
        )
      }
    }
  }
  let b;
  if (y instanceof $Empty) {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      6,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: y, start: 86, end: 113, pattern_start: 97, pattern_end: 109 }
    )
  } else {
    let $ = y.tail;
    if ($ instanceof $Empty) {
      throw makeError(
        "let_assert",
        FILEPATH,
        "my/mod",
        6,
        "go",
        "Pattern match failed, no pattern matched the value.",
        { value: y, start: 86, end: 113, pattern_start: 97, pattern_end: 109 }
      )
    } else {
      let $1 = $.tail;
      if ($1 instanceof $Empty) {
        let $2 = $.head[0];
        if ($2 === 3) {
          b = $.head[1];
        } else {
          throw makeError(
            "let_assert",
            FILEPATH,
            "my/mod",
            6,
            "go",
            "Pattern match failed, no pattern matched the value.",
            {
              value: y,
              start: 86,
              end: 113,
              pattern_start: 97,
              pattern_end: 109
            }
          )
        }
      } else {
        throw makeError(
          "let_assert",
          FILEPATH,
          "my/mod",
          6,
          "go",
          "Pattern match failed, no pattern matched the value.",
          { value: y, start: 86, end: 113, pattern_start: 97, pattern_end: 109 }
        )
      }
    }
  }
  let head;
  let tail;
  if (y instanceof $Empty) {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      7,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: y, start: 116, end: 145, pattern_start: 127, pattern_end: 141 }
    )
  } else {
    head = y.head;
    tail = y.tail;
  }
  return y;
}
