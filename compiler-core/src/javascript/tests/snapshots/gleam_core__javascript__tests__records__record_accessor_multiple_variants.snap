---
source: compiler-core/src/javascript/tests/records.rs
expression: "\npub type Person {\n    Teacher(name: String, title: String)\n    Student(name: String, age: Int)\n}\npub fn get_name(person: Person) { person.name }"
---
----- SOURCE CODE

pub type Person {
    Teacher(name: String, title: String)
    Student(name: String, age: Int)
}
pub fn get_name(person: Person) { person.name }

----- COMPILED JAVASCRIPT
import { CustomType as $CustomType } from "../gleam.mjs";

export class Teacher extends $CustomType {
  constructor(name, title) {
    super();
    this.name = name;
    this.title = title;
  }
}
export const Person$Teacher = (name, title) => new Teacher(name, title);
export const Person$isTeacher = (value) => value instanceof Teacher;
export const Person$Teacher$name = (value) => value.name;
export const Person$Teacher$0 = (value) => value.name;
export const Person$Teacher$title = (value) => value.title;
export const Person$Teacher$1 = (value) => value.title;

export class Student extends $CustomType {
  constructor(name, age) {
    super();
    this.name = name;
    this.age = age;
  }
}
export const Person$Student = (name, age) => new Student(name, age);
export const Person$isStudent = (value) => value instanceof Student;
export const Person$Student$name = (value) => value.name;
export const Person$Student$0 = (value) => value.name;
export const Person$Student$age = (value) => value.age;
export const Person$Student$1 = (value) => value.age;


export const Person$name = (value) => value.name;

export function get_name(person) {
  return person.name;
}
