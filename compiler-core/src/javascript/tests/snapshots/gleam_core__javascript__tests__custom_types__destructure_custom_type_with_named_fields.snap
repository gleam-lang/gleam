---
source: compiler-core/src/javascript/tests/custom_types.rs
assertion_line: 278
expression: "\ntype Cat {\n  Cat(name: String, cuteness: Int)\n}\n\nfn go(cat) {\n  let Cat(x, y) = cat\n  let Cat(name: x, ..) = cat\n  let assert Cat(cuteness: 4, name: x) = cat\n  x\n}\n\n"
snapshot_kind: text
---
----- SOURCE CODE

type Cat {
  Cat(name: String, cuteness: Int)
}

fn go(cat) {
  let Cat(x, y) = cat
  let Cat(name: x, ..) = cat
  let assert Cat(cuteness: 4, name: x) = cat
  x
}



----- COMPILED JAVASCRIPT
import { CustomType as $CustomType, makeError } from "../gleam.mjs";

const FILEPATH = "src/module.gleam";

class Cat extends $CustomType {
  constructor(name, cuteness) {
    super();
    this.name = name;
    this.cuteness = cuteness;
  }
}

function go(cat) {
  let x = cat.name;
  let y = cat.cuteness;
  let x$1 = cat.name;
  if (!(cat instanceof Cat) || cat.cuteness !== 4) {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      9,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: cat, start: 116, pattern_start: 127, pattern_end: 152 }
    )
  }
  let x$2 = cat.name;
  return x$2;
}
