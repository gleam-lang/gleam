---
source: compiler-core/src/javascript/tests/custom_types.rs
expression: "import other.{Two}\n\npub fn main(x) {\n  case x {\n    Two(a: 1, ..) -> 1\n    other.Two(b: 2, c: c, ..) -> c\n    _ -> 3\n  }\n}\n"
---
----- SOURCE CODE
-- other.gleam
pub type One { Two(a: Int, b: Int, c: Int) }

-- main.gleam
import other.{Two}

pub fn main(x) {
  case x {
    Two(a: 1, ..) -> 1
    other.Two(b: 2, c: c, ..) -> c
    _ -> 3
  }
}


----- COMPILED JAVASCRIPT
import * as $other from "../other.mjs";
import { Two } from "../other.mjs";

export function main(x) {
  let pattern = x.a;
  if (pattern === 1) {
    return 1;
  } else {
    let pattern$1 = x.b;
    if (pattern$1 === 2) {
      let c = x.c;
      return c;
    } else {
      return 3;
    }
  }
}
