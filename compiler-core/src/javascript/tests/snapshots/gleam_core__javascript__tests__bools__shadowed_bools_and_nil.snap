---
source: compiler-core/src/javascript/tests/bools.rs
expression: "\npub type True { True False Nil }\npub fn go(x, y) {\n  let assert True = x\n  let assert False = x\n  let assert Nil = y\n}\n"
---
----- SOURCE CODE

pub type True { True False Nil }
pub fn go(x, y) {
  let assert True = x
  let assert False = x
  let assert Nil = y
}


----- COMPILED JAVASCRIPT
import { CustomType as $CustomType, makeError } from "../gleam.mjs";

const FILEPATH = "src/module.gleam";

export class True extends $CustomType {}

export class False extends $CustomType {}

export class Nil extends $CustomType {}

export function go(x, y) {
  if (!(x instanceof True)) {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      4,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: x, start: 54, end: 73, pattern_start: 65, pattern_end: 69 }
    )
  }
  throw makeError(
    "let_assert",
    FILEPATH,
    "my/mod",
    5,
    "go",
    "Pattern match failed, no pattern matched the value.",
    { value: x, start: 76, end: 96, pattern_start: 87, pattern_end: 92 }
  )
  if (!(y instanceof Nil)) {
    throw makeError(
      "let_assert",
      FILEPATH,
      "my/mod",
      6,
      "go",
      "Pattern match failed, no pattern matched the value.",
      { value: y, start: 99, end: 117, pattern_start: 110, pattern_end: 113 }
    )
  }
  return y;
}
