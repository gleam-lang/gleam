//! Sourcemap generation utils
//!
//! # What are sourcemaps ?
//!
//! Sourcemaps are a tool of web development that helps debugging when working
//! with code that is generated from other code.
//!
//! A sourcemap is essentially a list of positions in a target file (the
//! code generated by the tool - in our case JavaScript) linked to a location
//! in the source code (Gleam) that is responsible for its presence.

use sourcemap::SourceMapBuilder;

use crate::line_numbers::LineColumn;

/// Tells whether or not the codegen should emit sourcemaps for all Gleam
/// modules
#[derive(Debug, Clone, Copy)]
pub enum SourceMapSupport {
    Emit,
    None,
}

/// An utility that handles the emission of an associated sourcemap
/// for a given Gleam module.
pub enum SourceMapEmitter {
    Null,
    Emit(Box<SourceMapBuilder>),
}

// A manual implementation of Debug since SourceMapBuilder doesn't support Debug
impl std::fmt::Debug for SourceMapEmitter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SourceMapEmitter::Null => f.write_str("Null"),
            SourceMapEmitter::Emit(_) => f.write_str("Emit"),
        }
    }
}

impl SourceMapEmitter {
    /// Adds one mapping on the generated (javascript) file
    /// referring to the given Gleam source location
    pub fn add_mapping(
        &mut self,
        generated_code_line: u32,
        generated_code_column: u32,
        source_location: LineColumn,
    ) {
        match self {
            SourceMapEmitter::Null => (),
            SourceMapEmitter::Emit(source_map) => {
                let _ = source_map.add_raw(
                    generated_code_line,
                    generated_code_column,
                    // -1 Because sourcemaps are 0-indexed, LineColumn isn't
                    source_location.line - 1,
                    source_location.column - 1,
                    Some(0), // Because one Gleam file -> one target file
                    None,
                    false,
                );
            }
        }
    }

    /// Consumes the SourceMapEmitter to get the content of the sourcemap as a
    /// String
    pub fn maybe_emit_sourcemap_content(self) -> Option<String> {
        match self {
            SourceMapEmitter::Null => None,
            SourceMapEmitter::Emit(builder) => {
                let sourcemap = builder.into_sourcemap();
                let mut output = Vec::new();
                // We first write to a vector then build a string, hoping that
                // the `sourcemap` crate generated a valid sourcemap. If it
                // did not, it is a bug that should be reported.
                //
                // SourceMap currently does not support being written directly
                // to a string.
                sourcemap
                    .to_writer(&mut output)
                    .expect("Failed to write sourcemap to memory.");
                let content =
                    String::from_utf8(output).expect("Sourcemap did not generate valid UTF-8.");
                Some(content)
            }
        }
    }

    /// Creates a null SourceMapEmitter.
    /// Any operation on this SourceMapEmitter will be no-ops
    pub fn null() -> Self {
        SourceMapEmitter::Null
    }
}
