#![allow(dead_code)]

use ecow::EcoString;
use im::{HashMap, HashSet};
use std::sync::Arc;

use crate::{
    ast::{TypeAst, UnqualifiedImport},
    type_::{Type, TypeVar, PRELUDE_MODULE_NAME},
};

#[derive(Debug)]
pub struct AnnotationPrinter<'a> {
    names: HashMap<u64, EcoString>,
    uid: u64,

    // Type aliases that are defined in the current module
    // Key: (module name, type name), Value: Alias
    // eg: A type alias statement like so :
    // type UserId = Int
    // would result in  Key: (mod, UserId), Value: Int
    type_aliases: &'a HashMap<(EcoString, EcoString), EcoString>,

    // Mapping of imported modules to their aliased named
    // Key: Module name, Value: Alias
    // eg: import mod1 as M -> Key: mod1, Value: M
    module_aliases: &'a HashMap<EcoString, EcoString>,

    // Generic type parameters that have been annotated by the user
    // eg:
    // fn foo(arg1: bar, arg2){
    //  arg1 == arg2
    // } -> Here bar is an annoation. So the key would be its generic type ID and the associated value would be bar.
    // This needs to be kept track to ensure that the generated type annotation of arg2 is bar(user-given) and not the generic type(a, b, ..) that is generated by the compiler.
    generic_annotations: &'a HashMap<u64, TypeAst>,

    // These are unqualified types that are imported in the current module.
    unqualified_imports: &'a HashMap<(EcoString, EcoString), UnqualifiedImport>,

    // A set of unqualified type names that are valid in the current module - used to check if a prelude type is shadowed.
    unqualified_type_names: &'a HashSet<EcoString>,
}

impl<'a> AnnotationPrinter<'a> {
    pub fn new(
        type_aliases: &'a HashMap<(EcoString, EcoString), EcoString>,
        module_aliases: &'a HashMap<EcoString, EcoString>,
        generic_annotations: &'a HashMap<u64, TypeAst>,
        unqualified_imports: &'a HashMap<(EcoString, EcoString), UnqualifiedImport>,
        unqualified_type_names: &'a HashSet<EcoString>,
    ) -> Self {
        AnnotationPrinter {
            names: im::HashMap::new(),
            uid: u64::default(),
            type_aliases,
            module_aliases,
            generic_annotations,
            unqualified_imports,
            unqualified_type_names,
        }
    }

    pub fn print_type(&mut self, typ: &Type) -> String {
        let mut typ_str = EcoString::new();
        self.print(typ, &mut typ_str);
        typ_str.into()
    }

    fn print(&mut self, typ: &Type, typ_str: &mut EcoString) {
        match typ {
            Type::Named {
                name, args, module, ..
            } => {
                let key = (module.clone(), name.clone());

                if let Some(typ_alias) = self.type_aliases.get(&key) {
                    typ_str.push_str(typ_alias.as_str());
                } else if module == PRELUDE_MODULE_NAME
                    && !self.unqualified_type_names.contains(name)
                {
                    typ_str.push_str(name.as_str());
                } else if let Some(unqualified_import) = self.unqualified_imports.get(&key) {
                    if let Some(as_name) = &unqualified_import.as_name {
                        typ_str.push_str(as_name.as_str());
                    } else {
                        typ_str.push_str(name.as_str());
                    }
                } else {
                    typ_str.push_str(module);
                    typ_str.push('.');
                    typ_str.push_str(name);
                }

                if !args.is_empty() {
                    typ_str.push('(');
                    self.args_to_string(args, typ_str);
                    typ_str.push(')');
                }
            }
            Type::Fn { args, retrn } => {
                typ_str.push_str("fn(");
                self.args_to_string(args, typ_str);
                typ_str.push_str(") -> ");
                self.print(retrn, typ_str);
            }
            Type::Var { type_: typ, .. } => match *typ.borrow() {
                TypeVar::Link { type_: ref typ, .. } => self.print(typ, typ_str),
                TypeVar::Unbound { id, .. } | TypeVar::Generic { id, .. } => {
                    if let Some(crate::ast::TypeAst::Var(type_var)) =
                        self.generic_annotations.get(&id)
                    {
                        typ_str.push_str(&type_var.name);
                        return;
                    }
                    self.generic_type_var(id, typ_str);
                }
            },
            Type::Tuple { elems, .. } => {
                typ_str.push_str("#(");
                self.args_to_string(elems, typ_str);
                typ_str.push(')');
            }
        }
    }

    fn args_to_string(&mut self, args: &[Arc<Type>], typ_str: &mut EcoString) {
        for (i, arg) in args.iter().enumerate() {
            self.print(arg, typ_str);
            if i < args.len() - 1 {
                typ_str.push_str(", ");
            }
        }
    }

    fn generic_type_var(&mut self, id: u64, typ_str: &mut EcoString) {
        match self.names.get(&id) {
            Some(n) => {
                typ_str.push_str(n);
            }
            None => {
                let n = self.next_letter();
                let _ = self.names.insert(id, n.clone());
                typ_str.push_str(&n)
            }
        }
    }

    fn next_letter(&mut self) -> EcoString {
        let alphabet_length = 26;
        let char_offset = 97;
        let mut chars = vec![];
        let mut n;
        let mut rest = self.uid;

        loop {
            n = rest % alphabet_length;
            rest /= alphabet_length;
            chars.push((n as u8 + char_offset) as char);

            if rest == 0 {
                break;
            }
            rest -= 1
        }

        self.uid += 1;
        chars.into_iter().rev().collect()
    }
}

#[test]
fn test_type_alias() {
    let mut type_aliases = HashMap::new();
    let module_aliases = HashMap::new();
    let generic_annotations = HashMap::new();
    let unqualified_imports = HashMap::new();
    let unqualified_type_names = HashSet::new();

    let _ = type_aliases.insert(
        (EcoString::from("mod"), EcoString::from("Tiger")),
        EcoString::from("Cat"),
    );

    let mut printer = AnnotationPrinter::new(
        &type_aliases,
        &module_aliases,
        &generic_annotations,
        &unqualified_imports,
        &unqualified_type_names,
    );

    let typ = Type::Named {
        name: EcoString::from("Tiger"),
        args: vec![],
        module: EcoString::from("mod"),
        publicity: crate::ast::Publicity::Public,
        package: EcoString::from(""),
    };

    assert_eq!(printer.print_type(&typ), "Cat");
}

#[test]
fn test_type_parameter() {
    let type_aliases = HashMap::new();
    let module_aliases = HashMap::new();
    let unqualified_imports = HashMap::new();
    let unqualified_type_names = HashSet::new();
    let mut generic_annotations = HashMap::new();

    let type_var = TypeAst::Var(crate::ast::TypeAstVar {
        name: EcoString::from("T"),
        location: crate::ast::SrcSpan::default(),
    });

    let _ = generic_annotations.insert(0, type_var);
    let mut printer = AnnotationPrinter::new(
        &type_aliases,
        &module_aliases,
        &generic_annotations,
        &unqualified_imports,
        &unqualified_type_names,
    );

    let typ = Type::Var {
        type_: Arc::new(std::cell::RefCell::new(TypeVar::Generic { id: 0 })),
    };

    assert_eq!(printer.print_type(&typ), "T");
}

#[test]
fn test_unqualified_import() {
    let type_aliases = HashMap::new();
    let module_aliases = HashMap::new();
    let generic_annotations = HashMap::new();
    let mut unqualified_imports = HashMap::new();
    let unqualified_type_names = HashSet::new();

    let unqualified_import = UnqualifiedImport {
        name: EcoString::from("Cat"),
        as_name: Some(EcoString::from("C")),
        location: crate::ast::SrcSpan::default(),
    };

    let _ = unqualified_imports.insert(
        (EcoString::from("mod"), EcoString::from("Cat")),
        unqualified_import,
    );

    let mut printer = AnnotationPrinter::new(
        &type_aliases,
        &module_aliases,
        &generic_annotations,
        &unqualified_imports,
        &unqualified_type_names,
    );

    let typ = Type::Named {
        name: EcoString::from("Cat"),
        args: vec![],
        module: EcoString::from("mod"),
        publicity: crate::ast::Publicity::Public,
        package: EcoString::from(""),
    };

    assert_eq!(printer.print_type(&typ), "C");
}

#[test]
fn test_prelude_type_shadowed() {
    let type_aliases = HashMap::new();
    let module_aliases = HashMap::new();
    let generic_annotations = HashMap::new();
    let unqualified_imports = HashMap::new();
    let mut unqualified_type_names = HashSet::new();

    let _ = unqualified_type_names.insert(EcoString::from("Int"));

    let mut printer = AnnotationPrinter::new(
        &type_aliases,
        &module_aliases,
        &generic_annotations,
        &unqualified_imports,
        &unqualified_type_names,
    );

    let typ = Type::Named {
        name: EcoString::from("Int"),
        args: vec![],
        module: PRELUDE_MODULE_NAME.into(),
        publicity: crate::ast::Publicity::Public,
        package: EcoString::from(""),
    };

    assert_eq!(printer.print_type(&typ), "gleam.Int");
}
