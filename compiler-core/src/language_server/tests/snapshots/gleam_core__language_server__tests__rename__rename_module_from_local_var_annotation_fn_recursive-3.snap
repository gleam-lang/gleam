---
source: compiler-core/src/language_server/tests/rename.rs
expression: "import mod\nfn func() { let _: fn(mod.GenericType(mod.Type)) -> mod.GenericType(mod.Type) = fn(arg: mod.GenericType(mod.Type)) -> mod.GenericType(mod.Type) { arg } }"
---
----- BEFORE RENAME
-- mod.gleam
pub fn fn1() { Nil }
pub const const1 = 5
pub const const2 = <<0:8>>
pub const const3 = "Hello"
pub type Type { Variant1 Variant2(Int) }
pub type GenericType(inner) { Node(inner, GenericType(inner)) Leaf }

-- app.gleam
import mod
fn func() { let _: fn(mod.GenericType(mod.Type)) -> mod.GenericType(mod.Type) = fn(arg: mod.GenericType(mod.Type)) -> mod.GenericType(mod.Type) { arg } }
                                                    ↑▔▔                                                                                                  


----- AFTER RENAME
-- mod.gleam
pub fn fn1() { Nil }
pub const const1 = 5
pub const const2 = <<0:8>>
pub const const3 = "Hello"
pub type Type { Variant1 Variant2(Int) }
pub type GenericType(inner) { Node(inner, GenericType(inner)) Leaf }

-- app.gleam
import mod as module
fn func() { let _: fn(module.GenericType(module.Type)) -> module.GenericType(module.Type) = fn(arg: module.GenericType(module.Type)) -> module.GenericType(module.Type) { arg } }
