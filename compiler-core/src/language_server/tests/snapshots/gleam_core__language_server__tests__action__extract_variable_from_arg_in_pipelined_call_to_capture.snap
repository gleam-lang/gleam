---
source: compiler-core/src/language_server/tests/action.rs
expression: "\npub fn main() {\n  let adder = add\n  let x = adder |> reduce([1, 2, 3], _)\n  x\n}\npub fn reduce(list: List(a), fun: fn(a, a) -> a) -> Result(a, Nil) { todo }\npub fn add(a: Int, b: Int) -> Int { todo }\n"
---
----- BEFORE ACTION

pub fn main() {
  let adder = add
  let x = adder |> reduce([1, 2, 3], _)
                          â†‘            
  x
}
pub fn reduce(list: List(a), fun: fn(a, a) -> a) -> Result(a, Nil) { todo }
pub fn add(a: Int, b: Int) -> Int { todo }


----- AFTER ACTION

pub fn main() {
  let adder = add
  let ints = [1, 2, 3]
  let x = adder |> reduce(ints, _)
  x
}
pub fn reduce(list: List(a), fun: fn(a, a) -> a) -> Result(a, Nil) { todo }
pub fn add(a: Int, b: Int) -> Int { todo }
