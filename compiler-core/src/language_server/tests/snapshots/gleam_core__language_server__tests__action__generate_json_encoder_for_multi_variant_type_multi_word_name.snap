---
source: compiler-core/src/language_server/tests/action.rs
expression: "\npub type Wibble {\n  OneTwoThree(wibble: Int, next: Wibble)\n  FourFive(wobble: Float, text: String, values: List(Bool))\n  SixSevenEight(one_two: Float)\n}\n"
---
----- BEFORE ACTION

pub type Wibble {
    â†‘            
  OneTwoThree(wibble: Int, next: Wibble)
  FourFive(wobble: Float, text: String, values: List(Bool))
  SixSevenEight(one_two: Float)
}


----- AFTER ACTION
import gleam/json

pub type Wibble {
  OneTwoThree(wibble: Int, next: Wibble)
  FourFive(wobble: Float, text: String, values: List(Bool))
  SixSevenEight(one_two: Float)
}

fn encode_wibble(wibble: Wibble) -> json.Json {
  case wibble {
    OneTwoThree(..) -> json.object([
      #("type", json.string("one_two_three")),
      #("wibble", json.int(wibble.wibble)),
      #("next", encode_wibble(wibble.next)),
    ])
    FourFive(..) -> json.object([
      #("type", json.string("four_five")),
      #("wobble", json.float(wibble.wobble)),
      #("text", json.string(wibble.text)),
      #("values", json.array(wibble.values, json.bool)),
    ])
    SixSevenEight(..) -> json.object([
      #("type", json.string("six_seven_eight")),
      #("one_two", json.float(wibble.one_two)),
    ])
  }
}
