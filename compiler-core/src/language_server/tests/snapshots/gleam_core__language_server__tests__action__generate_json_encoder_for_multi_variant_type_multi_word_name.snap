---
source: compiler-core/src/language_server/tests/action.rs
expression: "\npub type Wibble {\n  OneTwoThree(wibble: Int, next: Wibble)\n  FourFive(wobble: Float, text: String, values: List(Bool))\n  SixSevenEight(one_two: Float)\n}\n"
---
----- BEFORE ACTION

pub type Wibble {
    â†‘            
  OneTwoThree(wibble: Int, next: Wibble)
  FourFive(wobble: Float, text: String, values: List(Bool))
  SixSevenEight(one_two: Float)
}


----- AFTER ACTION
import gleam/json

pub type Wibble {
  OneTwoThree(wibble: Int, next: Wibble)
  FourFive(wobble: Float, text: String, values: List(Bool))
  SixSevenEight(one_two: Float)
}

fn wibble_to_json(wibble: Wibble) -> json.Json {
  case wibble {
    OneTwoThree(wibble:, next:) -> json.object([
      #("type", json.string("one_two_three")),
      #("wibble", json.int(wibble)),
      #("next", wibble_to_json(next)),
    ])
    FourFive(wobble:, text:, values:) -> json.object([
      #("type", json.string("four_five")),
      #("wobble", json.float(wobble)),
      #("text", json.string(text)),
      #("values", json.array(values, json.bool)),
    ])
    SixSevenEight(one_two:) -> json.object([
      #("type", json.string("six_seven_eight")),
      #("one_two", json.float(one_two)),
    ])
  }
}
