---
source: compiler-core/src/language_server/tests/rename.rs
expression: "import mod\nfn func(arg: mod.Type) {\n  case arg {\n    mod.Variant1 -> todo\n    mod.Variant2(3) -> todo\n    mod.Variant2(_) -> todo\n    mod.Variant2(..) -> todo\n  }\n}"
---
----- BEFORE RENAME
-- mod.gleam
pub fn fn1() { Nil }
pub const const1 = 5
pub const const2 = <<0:8>>
pub const const3 = "Hello"
pub type Type { Variant1 Variant2(Int) }
pub type GenericType(inner) { Node(inner, GenericType(inner)) Leaf }

-- app.gleam
import mod
fn func(arg: mod.Type) {
  case arg {
    mod.Variant1 -> todo
    mod.Variant2(3) -> todo
    mod.Variant2(_) -> todo
    ↑▔▔                    
    mod.Variant2(..) -> todo
  }
}


----- AFTER RENAME
-- mod.gleam
pub fn fn1() { Nil }
pub const const1 = 5
pub const const2 = <<0:8>>
pub const const3 = "Hello"
pub type Type { Variant1 Variant2(Int) }
pub type GenericType(inner) { Node(inner, GenericType(inner)) Leaf }

-- app.gleam
import mod as module
fn func(arg: module.Type) {
  case arg {
    module.Variant1 -> todo
    module.Variant2(3) -> todo
    module.Variant2(_) -> todo
    module.Variant2(..) -> todo
  }
}
