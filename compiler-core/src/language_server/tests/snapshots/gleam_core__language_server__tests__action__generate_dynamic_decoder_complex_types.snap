---
source: compiler-core/src/language_server/tests/action.rs
expression: "\nimport gleam/option\nimport gleam/dynamic\nimport gleam/dict\n\npub type Something\n\npub type Wibble(value) {\n  Wibble(\n    maybe: option.Option(Something),\n    map: dict.Dict(String, List(value)),\n    unknown: List(dynamic.Dynamic),\n  )\n}\n"
---
----- BEFORE ACTION

import gleam/option
import gleam/dynamic
import gleam/dict

pub type Something

pub type Wibble(value) {
    â†‘                   
  Wibble(
    maybe: option.Option(Something),
    map: dict.Dict(String, List(value)),
    unknown: List(dynamic.Dynamic),
  )
}


----- AFTER ACTION

import gleam/dynamic/decode
import gleam/option
import gleam/dynamic
import gleam/dict

pub type Something

pub type Wibble(value) {
  Wibble(
    maybe: option.Option(Something),
    map: dict.Dict(String, List(value)),
    unknown: List(dynamic.Dynamic),
  )
}

fn wibble_decoder() -> decode.Decoder(Wibble(value)) {
  use maybe <- decode.field("maybe", decode.optional(todo as "Decoder for Something"))
  use map <- decode.field("map", decode.dict(decode.string, decode.list(todo as "Decoder for value")))
  use unknown <- decode.field("unknown", decode.list(decode.dynamic))
  decode.success(Wibble(maybe:, map:, unknown:))
}
