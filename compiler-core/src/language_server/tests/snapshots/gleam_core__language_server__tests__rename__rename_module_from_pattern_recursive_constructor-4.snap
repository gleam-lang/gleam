---
source: compiler-core/src/language_server/tests/rename.rs
expression: "import mod\nfn func(arg: mod.GenericType(mod.Type)) {\n  case arg {\n    mod.Node(mod.Variant1, mod.Node(_, _)) -> todo\n    mod.Node(_, _) -> todo\n    mod.Leaf -> todo\n  }\n}"
---
----- BEFORE RENAME
-- mod.gleam
pub fn fn1() { Nil }
pub const const1 = 5
pub const const2 = <<0:8>>
pub const const3 = "Hello"
pub type Type { Variant1 Variant2(Int) }
pub type GenericType(inner) { Node(inner, GenericType(inner)) Leaf }

-- app.gleam
import mod
fn func(arg: mod.GenericType(mod.Type)) {
  case arg {
    mod.Node(mod.Variant1, mod.Node(_, _)) -> todo
    mod.Node(_, _) -> todo
    mod.Leaf -> todo
    ↑▔▔             
  }
}


----- AFTER RENAME
-- mod.gleam
pub fn fn1() { Nil }
pub const const1 = 5
pub const const2 = <<0:8>>
pub const const3 = "Hello"
pub type Type { Variant1 Variant2(Int) }
pub type GenericType(inner) { Node(inner, GenericType(inner)) Leaf }

-- app.gleam
import mod as module
fn func(arg: module.GenericType(module.Type)) {
  case arg {
    module.Node(module.Variant1, module.Node(_, _)) -> todo
    module.Node(_, _) -> todo
    module.Leaf -> todo
  }
}
